<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cocktail&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-04T15:30:58.214Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Cocktail</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python basics</title>
    <link href="http://example.com/2022/10/04/python/"/>
    <id>http://example.com/2022/10/04/python/</id>
    <published>2022-10-04T15:27:57.780Z</published>
    <updated>2022-10-04T15:30:58.214Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第2章-控制结构与异常处理"><a href="#第2章-控制结构与异常处理" class="headerlink" title="第2章 控制结构与异常处理"></a>第2章 控制结构与异常处理</h3><h4 id="循环程序设计"><a href="#循环程序设计" class="headerlink" title="循环程序设计"></a>循环程序设计</h4><p>for 循环</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;可迭代对象的集合&gt;:</span><br><span class="line">&lt;循环体&gt;/&lt;语句块&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立3*3矩阵并输出</span></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    a.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input num:&quot;</span>))</span><br><span class="line">        a[i].append(num)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>while 循环</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;循环条件&gt;:</span><br><span class="line">&lt;循环体&gt;/&lt;语句块&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><p>循环中的特殊语句</p><p>breakcontinuepass(什么也不做)</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>一般格式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    &lt;statements1&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;name1&gt;:</span><br><span class="line">    &lt;statements2&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;name2, name3&gt;:</span><br><span class="line">    &lt;statements3&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;name4&gt; <span class="keyword">as</span> e:<span class="comment">#捕获异常name4，e作为其实例</span></span><br><span class="line">    &lt;statements4&gt;</span><br><span class="line"><span class="keyword">else</span>:<span class="comment">#无异常</span></span><br><span class="line">    &lt;statements6&gt;</span><br><span class="line"><span class="keyword">finally</span>:<span class="comment">#有无异常都执行</span></span><br><span class="line">    &lt;statements7&gt;</span><br></pre></td></tr></table></figure><p>自定义异常类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#格式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#抛出异常类</span></span><br><span class="line"><span class="keyword">raise</span> &lt;<span class="keyword">class</span>&gt;<span class="comment">#创建并抛出类的实例</span></span><br><span class="line"><span class="keyword">raise</span> &lt;instance&gt;<span class="comment">#抛出类的实例</span></span><br><span class="line"><span class="comment">#异常处理代码：可以写在except里</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#example</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrExcept</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">input</span>(<span class="string">&quot;name: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x)&lt;<span class="number">2</span> <span class="keyword">or</span> <span class="built_in">len</span>(x)&gt;<span class="number">20</span>:</span><br><span class="line">        <span class="comment">#抛出异常</span></span><br><span class="line">        <span class="keyword">raise</span> StrExcept</span><br><span class="line">    <span class="comment">#异常处理</span></span><br><span class="line">    <span class="keyword">except</span> StrExcept:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;名称异常&quot;</span>)</span><br></pre></td></tr></table></figure><p>assert 语句：期望满足用户指定的条件。当用户定义的约束不满足时触发 AssertionError 异常。它是条件式的raise语句</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> &lt;test&gt;, &lt;data&gt; <span class="comment"># &lt;data&gt; 可选</span></span><br><span class="line"><span class="comment">#等效代码</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> &lt;test&gt;:</span><br><span class="line"><span class="keyword">raise</span> AssertionError(&lt;data&gt;)</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">arg1, arg2, ..., *tuple_args, **dec_args</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数列表:语句块</span><br><span class="line"><span class="comment">#example</span></span><br><span class="line">f = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">#3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例：计算任意两点间距离</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">d</span>(<span class="params">x1,x2,y1,y2</span>):</span><br><span class="line">    <span class="keyword">return</span> sqrt((x1-x2)**<span class="number">2</span> + (y1-y2)**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ma</span>():</span><br><span class="line">    x = [<span class="number">1</span>,-<span class="number">1</span>,<span class="number">2</span>,-<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">    y = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1.5</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">    dd = []</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        dd.append([])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            v = d(x[i],x[j],y[i],y[j])</span><br><span class="line">            dd[i].append(v)</span><br><span class="line">            <span class="keyword">if</span> s &lt; dd[i][j]:</span><br><span class="line">                s = dd[i][j]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%5.2f&quot;</span> % dd[i][j], end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><p>内置高阶函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#zip: 可以同时遍历多个序列,遍历次数为最短序列长度</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(a,b):</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#map: 可以根据提供的函数对指定序列做映射</span></span><br><span class="line"><span class="comment">#example：将序列中的元素平方</span></span><br><span class="line"><span class="built_in">print</span>(*<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x*x, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#filter</span></span><br><span class="line"><span class="comment">#example：过滤序列中的偶数</span></span><br><span class="line"><span class="built_in">print</span>(*<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x%<span class="number">2</span>==<span class="number">1</span>), [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算列表中正数之和</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">4</span>,<span class="number">6</span>,-<span class="number">3</span>]</span><br><span class="line">s = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x&gt;<span class="number">0</span>, l)</span><br><span class="line">sum1 = reduce(<span class="keyword">lambda</span> x,y:x+y,s)</span><br><span class="line"><span class="built_in">print</span>(sum1)</span><br></pre></td></tr></table></figure><p>自定义高阶函数</p><p>【闭包】函数的嵌套定义。在函数内部定义一个嵌套函数，将嵌套函数视为一个对象，将内嵌函数作为包含它的函数的返回结果(相当于返回一段函数代码)</p><h3 id="第3章-面向对象程序设计"><a href="#第3章-面向对象程序设计" class="headerlink" title="第3章 面向对象程序设计"></a>第3章 面向对象程序设计</h3><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#声明类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">    成员变量</span><br><span class="line">    成员函数</span><br><span class="line">    </span><br><span class="line"><span class="comment">#定义类的对象</span></span><br><span class="line">对象名 = 类名()</span><br><span class="line"></span><br><span class="line"><span class="comment">#成员变量</span></span><br><span class="line">公有变量</span><br><span class="line">私有变量 __xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, 其他参数</span>):</span><br><span class="line">    语句块</span><br><span class="line"><span class="comment">#析构函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#静态成员与静态方法（可以实现实例化使用 C().f()，当然也可以不实例化调用该方法 C.f()）</span></span><br><span class="line"><span class="comment">#（1）他们都是属于类的</span></span><br><span class="line"><span class="comment">#（2）静态方法无需传入self参数(self代表的是类的实例，代表当前对象的地址，而 self.__class__ 则指向类)，无法访问实例变量</span></span><br><span class="line"><span class="comment">#（3）直接通过类名访问</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">静态方法名</span>():</span><br><span class="line">    方法体</span><br></pre></td></tr></table></figure><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">派生类名</span>(基类名<span class="number">1</span>,基类名<span class="number">2.</span>..):</span><br><span class="line">    类体</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, name, age</span>):</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bye&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.<span class="built_in">id</span>, self.name, self.age)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S</span>(<span class="title class_ inherited__">C</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, name, age, stdno, grade, score</span>):</span><br><span class="line">        <span class="built_in">super</span>(S, self).__init__(<span class="built_in">id</span>, name, age)</span><br><span class="line">        self.stdno = stdno</span><br><span class="line">        self.grade = grade</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(S, self).show()</span><br><span class="line">        <span class="built_in">print</span>(self.stdno, self.grade, self.score)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span>(<span class="title class_ inherited__">C</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, name, age, thno, dept, sal</span>):</span><br><span class="line">        <span class="built_in">super</span>(T, self).__init__(<span class="built_in">id</span>, name, age)</span><br><span class="line">        self.thno = thno</span><br><span class="line">        self.dept = dept</span><br><span class="line">        self.sal = sal</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c = C(<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;zsf&#x27;</span>, <span class="number">65</span>)</span><br><span class="line">    c.show()</span><br><span class="line">    <span class="keyword">del</span> c</span><br><span class="line">    s = S(<span class="string">&#x27;02&#x27;</span>, <span class="string">&#x27;zwj&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;160400101&#x27;</span>, <span class="number">1</span>, <span class="number">95</span>)</span><br><span class="line">    s.show()</span><br><span class="line">    <span class="keyword">del</span> s</span><br></pre></td></tr></table></figure><h4 id="多态与重载"><a href="#多态与重载" class="headerlink" title="多态与重载"></a>多态与重载</h4><p>抽象类和多态</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myAbc</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    __metaclass__ = ABCMeta</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">abstractmethodname</span>(<span class="params">self</span>): <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>构造函数的重载</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类成员与类方法（不需要实例化类就可以被类本身调用）</span></span><br><span class="line"><span class="comment">#（1）直接通过类名访问</span></span><br><span class="line"><span class="comment">#（2）构成类的多形态对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">类方法名</span>(<span class="params">[cls[, 参数列表]]</span>):</span><br><span class="line">        方法体</span><br><span class="line">        </span><br><span class="line"><span class="comment">#example</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">zDate</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, year, month, day</span>):</span><br><span class="line">        self.year = year</span><br><span class="line">        self.month = month</span><br><span class="line">        self.day = day</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">today</span>(<span class="params">cls</span>):</span><br><span class="line">        t = time.localtime()</span><br><span class="line">        <span class="keyword">return</span> cls(t.tm_year, t.tm_mon, t.tm_mday)</span><br><span class="line">b = zDate.today()</span><br><span class="line"><span class="built_in">print</span>(b.year, b.month, b.day)</span><br></pre></td></tr></table></figure><p>运算符重载</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, v</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x+v.x, self.y+v.y</span><br><span class="line"></span><br><span class="line">v1 = Vector2(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">v2 = Vector2(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(v1+v2)<span class="comment">#(4,6)</span></span><br></pre></td></tr></table></figure><h4 id="模块与类"><a href="#模块与类" class="headerlink" title="模块与类"></a>模块与类</h4><p>文件名.py是模块，一个类一个块</p><p>(1) 引入类<br>    <code>import 模块名</code> 或 <code>from 模块名 import 类名</code> </p><p>​如a.py中义了A类，在类C中引入了A：<code>import a 或 from a import A</code></p><p>(2) 包<br>    一个包含 <code>__init__.py</code> 的文件夹，称为包</p><p>(3)引入包中的模块<br>    <code>import 包名.模块名</code> 或 <code>模块名.类名</code></p><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, year, month, day</span>):</span><br><span class="line">        self.__year = year</span><br><span class="line">        self.month = month</span><br><span class="line">        self.day = day</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__year + <span class="string">&quot;.&quot;</span> + self.month + <span class="string">&quot;.&quot;</span> + self.day)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setYear</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.__year = value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getYear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__year</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMonth</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.month</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getDay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.day</span><br><span class="line">t = time.localtime()</span><br><span class="line">date = Date(t.tm_year, t.tm_mon, t.tm_mday)</span><br><span class="line"><span class="built_in">print</span>(date.getYear(), date.getMonth(), date.getDay())<span class="comment">#2022 3 31</span></span><br><span class="line">date.setYear(<span class="number">1990</span>)</span><br><span class="line"><span class="built_in">print</span>(date.getYear(), date.getMonth(), date.getDay())<span class="comment">#1990 3 31</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, r</span>):</span><br><span class="line">        self.r = r</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getR</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.r</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setR</span>(<span class="params">self, r</span>):</span><br><span class="line">        self.r = r</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">culArea</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> math.pi * <span class="built_in">pow</span>(self.r, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pillar</span>(<span class="title class_ inherited__">Circle</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, r, h</span>):</span><br><span class="line">        <span class="built_in">super</span>(Pillar, self).__init__(r)</span><br><span class="line">        self.h = h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getR</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(Pillar, self).getR()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getH</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setR</span>(<span class="params">self, r</span>):</span><br><span class="line">        <span class="built_in">super</span>(Pillar,self).setR(r)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setH</span>(<span class="params">self, h</span>):</span><br><span class="line">        self.h = h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">culVolumn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(Pillar, self).culArea() * self.h</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(math.sqrt(num))+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    L = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">20</span>, <span class="number">23</span>]</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isPrime(i):</span><br><span class="line">            res.append(i)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 最大公约数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greatest</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">        a,b = b,a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        temp = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="comment"># 最小公倍数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">least</span>(<span class="params">a,b</span>):</span><br><span class="line">    g = greatest(a,b)</span><br><span class="line">    <span class="keyword">return</span> (a // g) * (b // g) * g</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scoreFunc</span>():</span><br><span class="line">    score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input score:&quot;</span>))</span><br><span class="line">    score = score // <span class="number">10</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> score &gt;= <span class="number">6</span>, <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score == <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score == <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score == <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;D&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="第4章-复杂数据类型"><a href="#第4章-复杂数据类型" class="headerlink" title="第4章 复杂数据类型"></a>第4章 复杂数据类型</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>(1) 数字与字符串相互转化—str(), int(), float() </p><p>(2) 格式化生成字符串<br>     <code>‘目标字符串’%(数据1，数据2，...，数据n) </code></p><p>​ 转换字符串:<code> %[m]s, %[m]d, %[m.n]f, %[.n]e, %%</code></p><p>(3) 子串查找与替换函数—str.find(sub), str.rfind(sub), str.replace(old,new)</p><p>(4) 查找子串的位置—str.index(sub) </p><p>(5) 统计元素出现的次数—str.count(sub) </p><p>(6) 裁掉特定字符的函数—str.lstrip([chars]), str.rstrip([chars]), str.strip([chars])</p><p>(7) 分割子串—str.split(sep)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求两个字符串共有的最长子串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">substr</span>():</span><br><span class="line">    s1 = <span class="built_in">input</span>(<span class="string">&quot;input str1:&quot;</span>)</span><br><span class="line">    s2 = <span class="built_in">input</span>(<span class="string">&quot;input str2:&quot;</span>)</span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    r = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s1)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(s1)):</span><br><span class="line">            <span class="keyword">if</span> s1[i:j] <span class="keyword">in</span> s2 <span class="keyword">and</span> m &lt; j-i:</span><br><span class="line">                m = j - i</span><br><span class="line">                r = s1[i:j]</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>(1) 添加—append(), extend(), insert()</p><p>(2) 删除—pop(), remove(), del指令</p><p>(3) 元素位置查找—index()</p><p>(4) 统计元素出现的次数—sort(key&#x3D;None, reverse&#x3D;None), reverse()</p><p>(5) 清空列表元素—clear()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># IP地址转换</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isVIP</span>(<span class="params">L</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(L) != <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> L[i].isdigit()==<span class="literal">False</span> <span class="keyword">or</span> <span class="built_in">int</span>(L[i])&lt;<span class="number">0</span> <span class="keyword">or</span> <span class="built_in">int</span>(L[i])&gt;<span class="number">255</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_10to2</span>(<span class="params">num</span>):</span><br><span class="line">    s = <span class="built_in">bin</span>(num)</span><br><span class="line">    <span class="comment"># rjust：原字符串右对齐</span></span><br><span class="line">    res = s[<span class="number">2</span>:<span class="built_in">len</span>(s)+<span class="number">1</span>].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    ipS = <span class="built_in">input</span>(<span class="string">&quot;input IP:&quot;</span>)</span><br><span class="line">    L = ipS.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isVIP(L):</span><br><span class="line">        ipS = <span class="built_in">input</span>(<span class="string">&quot;input IP again:&quot;</span>)</span><br><span class="line">        L = ipS.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        s = s + <span class="string">&#x27; &#x27;</span> + _10to2(<span class="built_in">int</span>(L[i]))</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扑克牌排序输出</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">huase</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;黑桃&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;红桃&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;梅花&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;方块&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gP</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">2</span>:] == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">14</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">2</span>:] == <span class="string">&#x27;K&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">13</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">2</span>:] == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">2</span>:] == <span class="string">&#x27;J&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(s[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reR</span>(<span class="params">L</span>):</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L.count(e)):</span><br><span class="line">            L.remove(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">m</span>():</span><br><span class="line">    L = [<span class="string">&#x27;梅花A&#x27;</span>, <span class="string">&#x27;方块4&#x27;</span>, <span class="string">&#x27;梅花2&#x27;</span>, <span class="string">&#x27;方块4&#x27;</span>, <span class="string">&#x27;红桃7&#x27;</span>, <span class="string">&#x27;黑桃Q&#x27;</span>, <span class="string">&#x27;红桃K&#x27;</span>, <span class="string">&#x27;梅花9&#x27;</span>,<span class="string">&#x27;方块9&#x27;</span>, <span class="string">&#x27;红桃5&#x27;</span>,<span class="string">&#x27;梅花J&#x27;</span>,<span class="string">&#x27;方块8&#x27;</span>,<span class="string">&#x27;红桃5&#x27;</span>,<span class="string">&#x27;黑桃3&#x27;</span>,<span class="string">&#x27;黑桃10&#x27;</span>,<span class="string">&#x27;黑桃3&#x27;</span>,<span class="string">&#x27;红桃7&#x27;</span>,<span class="string">&#x27;黑桃Q&#x27;</span>]</span><br><span class="line">    L.sort(key=huase)</span><br><span class="line">    p = [<span class="string">&quot;黑桃&quot;</span>, <span class="string">&quot;红桃&quot;</span>, <span class="string">&quot;梅花&quot;</span>, <span class="string">&quot;方块&quot;</span>]</span><br><span class="line">    L2 = []</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        i = j</span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(L) <span class="keyword">and</span> p[k] <span class="keyword">in</span> L[j]:</span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">        s = L[i:j]</span><br><span class="line">        s.sort(key=gP, reverse=<span class="literal">True</span>)</span><br><span class="line">        L2 = L2 + s</span><br><span class="line">    L = L2</span><br><span class="line">    reR(L)</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>元祖是不可变的，可以看做元素固定不变的列表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;city&#x27;</span></span><br><span class="line">t = <span class="built_in">tuple</span>(s)</span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>以 {key: value} 形式组织数据</p><p>基本操作：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D = &#123;&#125; 或 D = <span class="built_in">dict</span><span class="comment">#空字典对象</span></span><br><span class="line">D = <span class="built_in">dict</span>(name=<span class="string">&#x27;Jack&#x27;</span>, age=<span class="number">45</span>)</span><br><span class="line">D[key] = value</span><br><span class="line">D[newkey] = newvalue</span><br><span class="line"><span class="keyword">del</span> D[key], D.clear()</span><br><span class="line">key <span class="keyword">in</span> D</span><br><span class="line"><span class="built_in">len</span>(D)</span><br><span class="line">判断两个字典是否相同：D1==D2</span><br></pre></td></tr></table></figure><p>操作函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"><span class="number">1.</span> keys(), values(), items()</span><br><span class="line"><span class="number">2.</span> get()</span><br><span class="line">D.get(<span class="string">&#x27;a&#x27;</span>) 或 D[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="number">3.</span> pop()</span><br><span class="line"><span class="number">4.</span> update()</span><br><span class="line">D.update(c=<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>例：词频统计</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ma</span>():</span><br><span class="line">    txt = <span class="built_in">input</span>(<span class="string">&quot;input text:&quot;</span>)</span><br><span class="line">    wordC = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="string">&#x27;!,.;:\n\t()#@- &#x27;</span>:</span><br><span class="line">        txt = txt.replace(e, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    L = txt.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    L.sort()</span><br><span class="line">    <span class="keyword">while</span> L[<span class="number">0</span>].isdigit() <span class="keyword">or</span> L[<span class="number">0</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">del</span> L[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">if</span> e <span class="keyword">in</span> wordC:</span><br><span class="line">            wordC[e] = wordC[e] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            wordC[e] = <span class="number">1</span></span><br><span class="line">    L1 = <span class="built_in">list</span>(wordC.items())</span><br><span class="line">    L1.sort(key=gN, reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(L1)):</span><br><span class="line">        <span class="keyword">if</span> L1[i][<span class="number">1</span>] &gt; <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(L1[i][<span class="number">0</span>], L1[i][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gN</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>无序且不重复，可变集合set和不可变集合frozenset</p><p>操作：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line">s = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s = &#123;(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), <span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">s = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line">s.add(<span class="string">&#x27;zxd&#x27;</span>)</span><br><span class="line">s.update([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), <span class="string">&#x27;zxd&#x27;</span>)<span class="comment">#&#123;0, 1, 2, &#x27;d&#x27;, &#x27;x&#x27;, &#x27;b&#x27;, &#x27;z&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line">s.discard(<span class="string">&#x27;a&#x27;</span>)<span class="comment">#如果元素不存在，不会发生错误</span></span><br><span class="line">s.remove(<span class="string">&#x27;a&#x27;</span>)<span class="comment">#如果元素不存在，会发生错误</span></span><br><span class="line">s.pop()</span><br><span class="line">s.clear()</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="built_in">len</span>(D)</span><br></pre></td></tr></table></figure><p>集合间的关系运算：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.issubset(t)</span><br><span class="line">s.isuperset(t)</span><br></pre></td></tr></table></figure><p>例：验证哥德巴赫猜想：任何一个超过2的偶数都可以写成两个素数之和</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pm</span>():</span><br><span class="line">    N = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input a even number:&quot;</span>))</span><br><span class="line">    <span class="keyword">while</span> N &lt;= <span class="number">3</span> <span class="keyword">or</span> N % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;not qualified!&quot;</span>)</span><br><span class="line">        N = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input a even number:&quot;</span>))</span><br><span class="line">    pme = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, N+<span class="number">1</span>):</span><br><span class="line">        pme.add(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> pme:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>*i, N+<span class="number">1</span>, i):</span><br><span class="line">                <span class="keyword">if</span> k <span class="keyword">in</span> pme:</span><br><span class="line">                    pme.remove(k)</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> pme:</span><br><span class="line">        f = N - e</span><br><span class="line">        <span class="keyword">if</span> f &gt;= e <span class="keyword">and</span> f <span class="keyword">in</span> pme:</span><br><span class="line">            <span class="built_in">print</span>(N,<span class="string">&#x27;=&#x27;</span>,e,<span class="string">&#x27;+&#x27;</span>,f)</span><br></pre></td></tr></table></figure><h3 id="第5章-网络程序设计"><a href="#第5章-网络程序设计" class="headerlink" title="第5章 网络程序设计"></a>第5章 网络程序设计</h3><h4 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h4><h5 id="基于UDP协议"><a href="#基于UDP协议" class="headerlink" title="基于UDP协议"></a>基于UDP协议</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 1.建立流式套接字，返回套接字号</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"><span class="comment"># 2.套接字s与本地地址绑定</span></span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">5005</span>))</span><br><span class="line"><span class="comment"># 3.在套接字上读写数据</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;client has exited&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;received:&#x27;</span>, data, <span class="string">&#x27;from&#x27;</span>, addr)</span><br><span class="line"><span class="comment"># 4.关闭套接字s</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 1.建立流式套接字，返回套接字号</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">port = <span class="number">5005</span></span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="comment"># 2.在套接字上读写数据</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    s.sendto(msg.encode(<span class="string">&quot;utf-8&quot;</span>), (host, port))</span><br><span class="line"><span class="comment"># 3.关闭套接字s</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h5 id="基于TCP协议"><a href="#基于TCP协议" class="headerlink" title="基于TCP协议"></a>基于TCP协议</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line">host = <span class="string">&#x27;&#x27;</span></span><br><span class="line">port = <span class="number">4700</span></span><br><span class="line">Buf = <span class="number">1024</span></span><br><span class="line">addr = (host, port)</span><br><span class="line">s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)</span><br><span class="line">s.bind(addr)</span><br><span class="line">s.listen(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;等待客户连接...\r\n&#x27;</span>)</span><br><span class="line">    cs, caddr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;连接来自于：&#x27;</span>, caddr)</span><br><span class="line">    data = <span class="string">&#x27;欢迎你的到来！\r\n&#x27;</span></span><br><span class="line">    cs.sendall(<span class="built_in">bytes</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data = cs.recv(Buf).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    data = <span class="string">&#x27;[%s]%s\r\n&#x27;</span>%(ctime(), data)</span><br><span class="line">    cs.sendall(<span class="built_in">bytes</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    cs.close()</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">buf = <span class="number">1024</span></span><br><span class="line">addr = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">4700</span>)</span><br><span class="line">cs = socket(AF.INET, SOCK_STRAM, <span class="number">0</span>)</span><br><span class="line">cs.connect(addr)</span><br><span class="line"><span class="keyword">if</span> data:</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        cs.sendall(<span class="built_in">bytes</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        data = cs.recv(buf).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">cs.close()</span><br></pre></td></tr></table></figure><p>进程：资源的分配和调度的一个独立单元</p><p>线程：CPU调度的基本单元</p><p>线程是轻量级的线程</p><h6 id="基于TCP协议的进程级网络通信程序"><a href="#基于TCP协议的进程级网络通信程序" class="headerlink" title="基于TCP协议的进程级网络通信程序"></a>基于TCP协议的进程级网络通信程序</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">conn, addr</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmsg = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cmsg:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            conn.send(cmsg.upper())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">     conn.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主进程开始&quot;</span>)</span><br><span class="line">    server = socket()</span><br><span class="line">    ip_port = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>)</span><br><span class="line">    server.bind(ip_port)</span><br><span class="line">    server.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, caddr = server.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;连接来自于：&quot;</span>, addr)</span><br><span class="line">        p = Process(target=talk, args=(conn, caddr))</span><br><span class="line">        p.start()</span><br><span class="line">    server.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">client = socket()</span><br><span class="line">ip_port = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>)</span><br><span class="line">client.connect(ip_port)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    inp = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;:&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inp: <span class="keyword">continue</span></span><br><span class="line">    client.send(inp.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    smsg = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;来自服务器端的消息：&quot;</span>, smsg.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><h6 id="基于TCP协议的线程级网络通信程序"><a href="#基于TCP协议的线程级网络通信程序" class="headerlink" title="基于TCP协议的线程级网络通信程序"></a>基于TCP协议的线程级网络通信程序</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">socket_list = []</span><br><span class="line">s = socket.socket()</span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">30000</span>))</span><br><span class="line">s.listen()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_client</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> s.recv(<span class="number">2048</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(addr) + <span class="string">&#x27;Left!&#x27;</span>)</span><br><span class="line">        socket_list.remove(s)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">socket_target</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            content = read_client(s)</span><br><span class="line">            <span class="keyword">if</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(content)</span><br><span class="line">                <span class="keyword">for</span> client <span class="keyword">in</span> socket_list:</span><br><span class="line">                    client.send((<span class="built_in">str</span>(addr)+<span class="string">&#x27;say:&#x27;</span>+content).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">     <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = s.accept()</span><br><span class="line">        socket_list.append(conn)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(addr)+<span class="string">&#x27;Joined!&#x27;</span>)</span><br><span class="line">    threading.Thread(target=socket_target, args=(conn,)).start()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">30000</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_server</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        content = s.recv(<span class="number">2048</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">threading.Thread(target=read_server, args=(s,)).start()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line = <span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> line == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    s.send(line.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="Internet编程"><a href="#Internet编程" class="headerlink" title="Internet编程"></a>Internet编程</h4><h5 id="Web资源访问"><a href="#Web资源访问" class="headerlink" title="Web资源访问"></a>Web资源访问</h5><p>urllib.request：打开和读取URL</p><p>urllib.parse：解析URL</p><p>urllib.error：urllib.request引发的异常</p><p>urllib.robotparse：解析robots文件</p><ol><li><p>urllib.request获取资源</p><p>urlopen()</p><p>info()：远程服务器返回的头信息</p><p>getcode()：状态码</p><p>geturl()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例：打开一个网站，显示头部信息、访问状态、网址及网页上前30行信息</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">content = urllib.request.urlopen(<span class="string">&quot;http://www.edu.cn&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(content.info())</span><br><span class="line"><span class="built_in">print</span>(content.getcode())</span><br><span class="line"><span class="built_in">print</span>(content.geturl())</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> content.readlines():</span><br><span class="line">    <span class="built_in">print</span>(line.decode(<span class="string">&#x27;gb2312&#x27;</span>))</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><p>urllib.request保存web资源</p><p><code>content = urllib.request.urlretrieve(&#39;http://www.edu.cn&#39;, &#39;c:\\zxd.htm&#39;)</code></p></li><li><p>urllib.request的Request实例</p><p><code>urllib.request.Request(key=value[,key=value,...])</code></p></li><li><p>对url进行编码、解码的有用方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urllib.quote()</span><br><span class="line">urllib.unquote()</span><br><span class="line">urllib.quote_plus()</span><br><span class="line">urllib.unquote_plus()</span><br></pre></td></tr></table></figure></li><li><p>向服务器传递参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">url = <span class="string">&quot;http://search.jd.com/Search&quot;</span></span><br><span class="line">values = &#123;<span class="string">&#x27;enc&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>: <span class="string">&#x27;平板电脑&#x27;</span>&#125;</span><br><span class="line">data = urllib.parse.urlencode(values)</span><br><span class="line">kv = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0&#x27;</span>&#125;</span><br><span class="line">req = urllib.request.Request(url=url+<span class="string">&#x27;?&#x27;</span>+data, headers=kv)</span><br><span class="line">content = urllib.request.urlopen(req)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> content:</span><br><span class="line">    <span class="built_in">print</span>(line.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">60</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">content = urllib.request.urlretrieve(url+<span class="string">&#x27;?&#x27;</span>+data, <span class="string">&#x27;zxd.htm&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h5 id="邮件客户端编程"><a href="#邮件客户端编程" class="headerlink" title="邮件客户端编程"></a>邮件客户端编程</h5><h3 id="第7章-数据存储及数据库程序设计"><a href="#第7章-数据存储及数据库程序设计" class="headerlink" title="第7章 数据存储及数据库程序设计"></a>第7章 数据存储及数据库程序设计</h3><h4 id="文件形式的存储"><a href="#文件形式的存储" class="headerlink" title="文件形式的存储"></a>文件形式的存储</h4><p>写文件：write&#x2F;writelines</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;tets.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        L = [<span class="string">&#x27;hit&#x27;</span>, <span class="string">&#x27;wh&#x27;</span>]</span><br><span class="line">        f.writelines(L)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件创建失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>读文件：read</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 精确读</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;tets.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.read(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(f.tell())</span><br><span class="line">        f.seek(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;FileNotFoundError&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 按行读</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;tets.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            <span class="built_in">print</span>(line)</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;FileNotFoundError&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="第9章-图形用户界面"><a href="#第9章-图形用户界面" class="headerlink" title="第9章 图形用户界面"></a>第9章 图形用户界面</h3><h4 id="Pack布局"><a href="#Pack布局" class="headerlink" title="Pack布局"></a>Pack布局</h4><p><code>组件.pack([属性名=属性值, 属性名=属性值,...])</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line">root = Tk()</span><br><span class="line">w = Label(root, text=<span class="string">&quot;red sun&quot;</span>, bg=<span class="string">&quot;red&quot;</span>, fg=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">w.pack(padx=<span class="number">5</span>, pady=<span class="number">10</span>, side=LEFT)</span><br><span class="line">mainloop()</span><br></pre></td></tr></table></figure><h4 id="Frame-pack"><a href="#Frame-pack" class="headerlink" title="Frame+pack"></a>Frame+pack</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line">root = Tk()</span><br><span class="line">root.title(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">root.geometry(<span class="string">&quot;470x280&quot;</span>)</span><br><span class="line">frm = Frame(root)</span><br><span class="line">frm_S = Frame(frm)</span><br><span class="line">Button(frm_S, text=<span class="string">&quot;send&quot;</span>, width=<span class="number">6</span>, height=<span class="number">1</span>).pack(side=LEFT)</span><br><span class="line">Button(frm_S, text=<span class="string">&quot;reset&quot;</span>, width=<span class="number">6</span>, height=<span class="number">1</span>).pack(side=RIGHT)</span><br><span class="line">frm_S.pack(side=TOP)</span><br><span class="line">frm.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h3 id="第8章-微服务"><a href="#第8章-微服务" class="headerlink" title="第8章 微服务"></a>第8章 微服务</h3><p>返回HTML文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line">user_list = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        temp = &#123;<span class="string">&#x27;user&#x27;</span>: username, <span class="string">&#x27;pwd&#x27;</span>: password&#125;</span><br><span class="line">        user_list.append(temp)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;data&#x27;</span>: user_list&#125;)</span><br></pre></td></tr></table></figure><p>创建模型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    book_name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    add_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__unicode__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.book_name</span><br></pre></td></tr></table></figure><p>创建服务api</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@require_http_methods(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_book</span>(<span class="params">request</span>):</span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        book = Book(book_name=request.GET.get(<span class="string">&#x27;book_name&#x27;</span>))</span><br><span class="line">        book.save()</span><br><span class="line">        response[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;success&#x27;</span></span><br><span class="line">        response[<span class="string">&#x27;error_num&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        response[<span class="string">&#x27;msg&#x27;</span>] = <span class="built_in">str</span>(e)</span><br><span class="line">        response[<span class="string">&#x27;error_num&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(response)</span><br><span class="line"></span><br><span class="line"><span class="meta">@require_http_methods(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_books</span>(<span class="params">request</span>):</span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        book = Book.objects.<span class="built_in">filter</span>()</span><br><span class="line">        response[<span class="string">&#x27;list&#x27;</span>] = json.loads(serializers.serialize(<span class="string">&quot;json&quot;</span>, books))</span><br><span class="line">        response[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;success&#x27;</span></span><br><span class="line">        response[<span class="string">&#x27;error_num&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        response[<span class="string">&#x27;msg&#x27;</span>] = <span class="built_in">str</span>(e)</span><br><span class="line">        response[<span class="string">&#x27;error_num&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(response)</span><br></pre></td></tr></table></figure><p>添加接口</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^add_book$&#x27;</span>, views.add_book),</span><br><span class="line">    url(<span class="string">r&#x27;^show_book$&#x27;</span>, views.show_books)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>解决跨域</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;corsheaders.middleware.CorsMiddleware&quot;</span>,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第2章-控制结构与异常处理&quot;&gt;&lt;a href=&quot;#第2章-控制结构与异常处理&quot; class=&quot;headerlink&quot; title=&quot;第2章 控制结构与异常处理&quot;&gt;&lt;/a&gt;第2章 控制结构与异常处理&lt;/h3&gt;&lt;h4 id=&quot;循环程序设计&quot;&gt;&lt;a href=&quot;#循环程</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python basics</title>
    <link href="http://example.com/2022/10/04/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2022/10/04/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-10-04T15:27:57.780Z</published>
    <updated>2022-10-04T15:30:58.214Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第2章-控制结构与异常处理"><a href="#第2章-控制结构与异常处理" class="headerlink" title="第2章 控制结构与异常处理"></a>第2章 控制结构与异常处理</h3><h4 id="循环程序设计"><a href="#循环程序设计" class="headerlink" title="循环程序设计"></a>循环程序设计</h4><p>for 循环</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;可迭代对象的集合&gt;:</span><br><span class="line">&lt;循环体&gt;/&lt;语句块&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立3*3矩阵并输出</span></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    a.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input num:&quot;</span>))</span><br><span class="line">        a[i].append(num)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>while 循环</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;循环条件&gt;:</span><br><span class="line">&lt;循环体&gt;/&lt;语句块&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><p>循环中的特殊语句</p><p>breakcontinuepass(什么也不做)</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>一般格式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    &lt;statements1&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;name1&gt;:</span><br><span class="line">    &lt;statements2&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;name2, name3&gt;:</span><br><span class="line">    &lt;statements3&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;name4&gt; <span class="keyword">as</span> e:<span class="comment">#捕获异常name4，e作为其实例</span></span><br><span class="line">    &lt;statements4&gt;</span><br><span class="line"><span class="keyword">else</span>:<span class="comment">#无异常</span></span><br><span class="line">    &lt;statements6&gt;</span><br><span class="line"><span class="keyword">finally</span>:<span class="comment">#有无异常都执行</span></span><br><span class="line">    &lt;statements7&gt;</span><br></pre></td></tr></table></figure><p>自定义异常类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#格式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#抛出异常类</span></span><br><span class="line"><span class="keyword">raise</span> &lt;<span class="keyword">class</span>&gt;<span class="comment">#创建并抛出类的实例</span></span><br><span class="line"><span class="keyword">raise</span> &lt;instance&gt;<span class="comment">#抛出类的实例</span></span><br><span class="line"><span class="comment">#异常处理代码：可以写在except里</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#example</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrExcept</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">input</span>(<span class="string">&quot;name: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x)&lt;<span class="number">2</span> <span class="keyword">or</span> <span class="built_in">len</span>(x)&gt;<span class="number">20</span>:</span><br><span class="line">        <span class="comment">#抛出异常</span></span><br><span class="line">        <span class="keyword">raise</span> StrExcept</span><br><span class="line">    <span class="comment">#异常处理</span></span><br><span class="line">    <span class="keyword">except</span> StrExcept:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;名称异常&quot;</span>)</span><br></pre></td></tr></table></figure><p>assert 语句：期望满足用户指定的条件。当用户定义的约束不满足时触发 AssertionError 异常。它是条件式的raise语句</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> &lt;test&gt;, &lt;data&gt; <span class="comment"># &lt;data&gt; 可选</span></span><br><span class="line"><span class="comment">#等效代码</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> &lt;test&gt;:</span><br><span class="line"><span class="keyword">raise</span> AssertionError(&lt;data&gt;)</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">arg1, arg2, ..., *tuple_args, **dec_args</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数列表:语句块</span><br><span class="line"><span class="comment">#example</span></span><br><span class="line">f = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">#3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例：计算任意两点间距离</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">d</span>(<span class="params">x1,x2,y1,y2</span>):</span><br><span class="line">    <span class="keyword">return</span> sqrt((x1-x2)**<span class="number">2</span> + (y1-y2)**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ma</span>():</span><br><span class="line">    x = [<span class="number">1</span>,-<span class="number">1</span>,<span class="number">2</span>,-<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">    y = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1.5</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">    dd = []</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        dd.append([])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            v = d(x[i],x[j],y[i],y[j])</span><br><span class="line">            dd[i].append(v)</span><br><span class="line">            <span class="keyword">if</span> s &lt; dd[i][j]:</span><br><span class="line">                s = dd[i][j]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%5.2f&quot;</span> % dd[i][j], end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><p>内置高阶函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#zip: 可以同时遍历多个序列,遍历次数为最短序列长度</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(a,b):</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#map: 可以根据提供的函数对指定序列做映射</span></span><br><span class="line"><span class="comment">#example：将序列中的元素平方</span></span><br><span class="line"><span class="built_in">print</span>(*<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x*x, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#filter</span></span><br><span class="line"><span class="comment">#example：过滤序列中的偶数</span></span><br><span class="line"><span class="built_in">print</span>(*<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x%<span class="number">2</span>==<span class="number">1</span>), [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算列表中正数之和</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">4</span>,<span class="number">6</span>,-<span class="number">3</span>]</span><br><span class="line">s = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x&gt;<span class="number">0</span>, l)</span><br><span class="line">sum1 = reduce(<span class="keyword">lambda</span> x,y:x+y,s)</span><br><span class="line"><span class="built_in">print</span>(sum1)</span><br></pre></td></tr></table></figure><p>自定义高阶函数</p><p>【闭包】函数的嵌套定义。在函数内部定义一个嵌套函数，将嵌套函数视为一个对象，将内嵌函数作为包含它的函数的返回结果(相当于返回一段函数代码)</p><h3 id="第3章-面向对象程序设计"><a href="#第3章-面向对象程序设计" class="headerlink" title="第3章 面向对象程序设计"></a>第3章 面向对象程序设计</h3><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#声明类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">    成员变量</span><br><span class="line">    成员函数</span><br><span class="line">    </span><br><span class="line"><span class="comment">#定义类的对象</span></span><br><span class="line">对象名 = 类名()</span><br><span class="line"></span><br><span class="line"><span class="comment">#成员变量</span></span><br><span class="line">公有变量</span><br><span class="line">私有变量 __xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, 其他参数</span>):</span><br><span class="line">    语句块</span><br><span class="line"><span class="comment">#析构函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#静态成员与静态方法（可以实现实例化使用 C().f()，当然也可以不实例化调用该方法 C.f()）</span></span><br><span class="line"><span class="comment">#（1）他们都是属于类的</span></span><br><span class="line"><span class="comment">#（2）静态方法无需传入self参数(self代表的是类的实例，代表当前对象的地址，而 self.__class__ 则指向类)，无法访问实例变量</span></span><br><span class="line"><span class="comment">#（3）直接通过类名访问</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">静态方法名</span>():</span><br><span class="line">    方法体</span><br></pre></td></tr></table></figure><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">派生类名</span>(基类名<span class="number">1</span>,基类名<span class="number">2.</span>..):</span><br><span class="line">    类体</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, name, age</span>):</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bye&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.<span class="built_in">id</span>, self.name, self.age)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S</span>(<span class="title class_ inherited__">C</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, name, age, stdno, grade, score</span>):</span><br><span class="line">        <span class="built_in">super</span>(S, self).__init__(<span class="built_in">id</span>, name, age)</span><br><span class="line">        self.stdno = stdno</span><br><span class="line">        self.grade = grade</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(S, self).show()</span><br><span class="line">        <span class="built_in">print</span>(self.stdno, self.grade, self.score)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span>(<span class="title class_ inherited__">C</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, name, age, thno, dept, sal</span>):</span><br><span class="line">        <span class="built_in">super</span>(T, self).__init__(<span class="built_in">id</span>, name, age)</span><br><span class="line">        self.thno = thno</span><br><span class="line">        self.dept = dept</span><br><span class="line">        self.sal = sal</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c = C(<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;zsf&#x27;</span>, <span class="number">65</span>)</span><br><span class="line">    c.show()</span><br><span class="line">    <span class="keyword">del</span> c</span><br><span class="line">    s = S(<span class="string">&#x27;02&#x27;</span>, <span class="string">&#x27;zwj&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;160400101&#x27;</span>, <span class="number">1</span>, <span class="number">95</span>)</span><br><span class="line">    s.show()</span><br><span class="line">    <span class="keyword">del</span> s</span><br></pre></td></tr></table></figure><h4 id="多态与重载"><a href="#多态与重载" class="headerlink" title="多态与重载"></a>多态与重载</h4><p>抽象类和多态</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myAbc</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    __metaclass__ = ABCMeta</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">abstractmethodname</span>(<span class="params">self</span>): <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>构造函数的重载</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类成员与类方法（不需要实例化类就可以被类本身调用）</span></span><br><span class="line"><span class="comment">#（1）直接通过类名访问</span></span><br><span class="line"><span class="comment">#（2）构成类的多形态对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">类方法名</span>(<span class="params">[cls[, 参数列表]]</span>):</span><br><span class="line">        方法体</span><br><span class="line">        </span><br><span class="line"><span class="comment">#example</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">zDate</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, year, month, day</span>):</span><br><span class="line">        self.year = year</span><br><span class="line">        self.month = month</span><br><span class="line">        self.day = day</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">today</span>(<span class="params">cls</span>):</span><br><span class="line">        t = time.localtime()</span><br><span class="line">        <span class="keyword">return</span> cls(t.tm_year, t.tm_mon, t.tm_mday)</span><br><span class="line">b = zDate.today()</span><br><span class="line"><span class="built_in">print</span>(b.year, b.month, b.day)</span><br></pre></td></tr></table></figure><p>运算符重载</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, v</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x+v.x, self.y+v.y</span><br><span class="line"></span><br><span class="line">v1 = Vector2(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">v2 = Vector2(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(v1+v2)<span class="comment">#(4,6)</span></span><br></pre></td></tr></table></figure><h4 id="模块与类"><a href="#模块与类" class="headerlink" title="模块与类"></a>模块与类</h4><p>文件名.py是模块，一个类一个块</p><p>(1) 引入类<br>    <code>import 模块名</code> 或 <code>from 模块名 import 类名</code> </p><p>​如a.py中义了A类，在类C中引入了A：<code>import a 或 from a import A</code></p><p>(2) 包<br>    一个包含 <code>__init__.py</code> 的文件夹，称为包</p><p>(3)引入包中的模块<br>    <code>import 包名.模块名</code> 或 <code>模块名.类名</code></p><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, year, month, day</span>):</span><br><span class="line">        self.__year = year</span><br><span class="line">        self.month = month</span><br><span class="line">        self.day = day</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__year + <span class="string">&quot;.&quot;</span> + self.month + <span class="string">&quot;.&quot;</span> + self.day)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setYear</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.__year = value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getYear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__year</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMonth</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.month</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getDay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.day</span><br><span class="line">t = time.localtime()</span><br><span class="line">date = Date(t.tm_year, t.tm_mon, t.tm_mday)</span><br><span class="line"><span class="built_in">print</span>(date.getYear(), date.getMonth(), date.getDay())<span class="comment">#2022 3 31</span></span><br><span class="line">date.setYear(<span class="number">1990</span>)</span><br><span class="line"><span class="built_in">print</span>(date.getYear(), date.getMonth(), date.getDay())<span class="comment">#1990 3 31</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, r</span>):</span><br><span class="line">        self.r = r</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getR</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.r</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setR</span>(<span class="params">self, r</span>):</span><br><span class="line">        self.r = r</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">culArea</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> math.pi * <span class="built_in">pow</span>(self.r, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pillar</span>(<span class="title class_ inherited__">Circle</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, r, h</span>):</span><br><span class="line">        <span class="built_in">super</span>(Pillar, self).__init__(r)</span><br><span class="line">        self.h = h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getR</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(Pillar, self).getR()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getH</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setR</span>(<span class="params">self, r</span>):</span><br><span class="line">        <span class="built_in">super</span>(Pillar,self).setR(r)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setH</span>(<span class="params">self, h</span>):</span><br><span class="line">        self.h = h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">culVolumn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(Pillar, self).culArea() * self.h</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(math.sqrt(num))+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    L = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">20</span>, <span class="number">23</span>]</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isPrime(i):</span><br><span class="line">            res.append(i)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 最大公约数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greatest</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">        a,b = b,a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        temp = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="comment"># 最小公倍数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">least</span>(<span class="params">a,b</span>):</span><br><span class="line">    g = greatest(a,b)</span><br><span class="line">    <span class="keyword">return</span> (a // g) * (b // g) * g</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scoreFunc</span>():</span><br><span class="line">    score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input score:&quot;</span>))</span><br><span class="line">    score = score // <span class="number">10</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> score &gt;= <span class="number">6</span>, <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score == <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score == <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score == <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;D&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="第4章-复杂数据类型"><a href="#第4章-复杂数据类型" class="headerlink" title="第4章 复杂数据类型"></a>第4章 复杂数据类型</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>(1) 数字与字符串相互转化—str(), int(), float() </p><p>(2) 格式化生成字符串<br>     <code>‘目标字符串’%(数据1，数据2，...，数据n) </code></p><p>​ 转换字符串:<code> %[m]s, %[m]d, %[m.n]f, %[.n]e, %%</code></p><p>(3) 子串查找与替换函数—str.find(sub), str.rfind(sub), str.replace(old,new)</p><p>(4) 查找子串的位置—str.index(sub) </p><p>(5) 统计元素出现的次数—str.count(sub) </p><p>(6) 裁掉特定字符的函数—str.lstrip([chars]), str.rstrip([chars]), str.strip([chars])</p><p>(7) 分割子串—str.split(sep)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求两个字符串共有的最长子串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">substr</span>():</span><br><span class="line">    s1 = <span class="built_in">input</span>(<span class="string">&quot;input str1:&quot;</span>)</span><br><span class="line">    s2 = <span class="built_in">input</span>(<span class="string">&quot;input str2:&quot;</span>)</span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    r = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s1)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(s1)):</span><br><span class="line">            <span class="keyword">if</span> s1[i:j] <span class="keyword">in</span> s2 <span class="keyword">and</span> m &lt; j-i:</span><br><span class="line">                m = j - i</span><br><span class="line">                r = s1[i:j]</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>(1) 添加—append(), extend(), insert()</p><p>(2) 删除—pop(), remove(), del指令</p><p>(3) 元素位置查找—index()</p><p>(4) 统计元素出现的次数—sort(key&#x3D;None, reverse&#x3D;None), reverse()</p><p>(5) 清空列表元素—clear()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># IP地址转换</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isVIP</span>(<span class="params">L</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(L) != <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> L[i].isdigit()==<span class="literal">False</span> <span class="keyword">or</span> <span class="built_in">int</span>(L[i])&lt;<span class="number">0</span> <span class="keyword">or</span> <span class="built_in">int</span>(L[i])&gt;<span class="number">255</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_10to2</span>(<span class="params">num</span>):</span><br><span class="line">    s = <span class="built_in">bin</span>(num)</span><br><span class="line">    <span class="comment"># rjust：原字符串右对齐</span></span><br><span class="line">    res = s[<span class="number">2</span>:<span class="built_in">len</span>(s)+<span class="number">1</span>].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    ipS = <span class="built_in">input</span>(<span class="string">&quot;input IP:&quot;</span>)</span><br><span class="line">    L = ipS.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isVIP(L):</span><br><span class="line">        ipS = <span class="built_in">input</span>(<span class="string">&quot;input IP again:&quot;</span>)</span><br><span class="line">        L = ipS.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        s = s + <span class="string">&#x27; &#x27;</span> + _10to2(<span class="built_in">int</span>(L[i]))</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扑克牌排序输出</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">huase</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;黑桃&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;红桃&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;梅花&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;方块&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gP</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">2</span>:] == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">14</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">2</span>:] == <span class="string">&#x27;K&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">13</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">2</span>:] == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span></span><br><span class="line">    <span class="keyword">elif</span> s[<span class="number">2</span>:] == <span class="string">&#x27;J&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(s[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reR</span>(<span class="params">L</span>):</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L.count(e)):</span><br><span class="line">            L.remove(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">m</span>():</span><br><span class="line">    L = [<span class="string">&#x27;梅花A&#x27;</span>, <span class="string">&#x27;方块4&#x27;</span>, <span class="string">&#x27;梅花2&#x27;</span>, <span class="string">&#x27;方块4&#x27;</span>, <span class="string">&#x27;红桃7&#x27;</span>, <span class="string">&#x27;黑桃Q&#x27;</span>, <span class="string">&#x27;红桃K&#x27;</span>, <span class="string">&#x27;梅花9&#x27;</span>,<span class="string">&#x27;方块9&#x27;</span>, <span class="string">&#x27;红桃5&#x27;</span>,<span class="string">&#x27;梅花J&#x27;</span>,<span class="string">&#x27;方块8&#x27;</span>,<span class="string">&#x27;红桃5&#x27;</span>,<span class="string">&#x27;黑桃3&#x27;</span>,<span class="string">&#x27;黑桃10&#x27;</span>,<span class="string">&#x27;黑桃3&#x27;</span>,<span class="string">&#x27;红桃7&#x27;</span>,<span class="string">&#x27;黑桃Q&#x27;</span>]</span><br><span class="line">    L.sort(key=huase)</span><br><span class="line">    p = [<span class="string">&quot;黑桃&quot;</span>, <span class="string">&quot;红桃&quot;</span>, <span class="string">&quot;梅花&quot;</span>, <span class="string">&quot;方块&quot;</span>]</span><br><span class="line">    L2 = []</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        i = j</span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(L) <span class="keyword">and</span> p[k] <span class="keyword">in</span> L[j]:</span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">        s = L[i:j]</span><br><span class="line">        s.sort(key=gP, reverse=<span class="literal">True</span>)</span><br><span class="line">        L2 = L2 + s</span><br><span class="line">    L = L2</span><br><span class="line">    reR(L)</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>元祖是不可变的，可以看做元素固定不变的列表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;city&#x27;</span></span><br><span class="line">t = <span class="built_in">tuple</span>(s)</span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>以 {key: value} 形式组织数据</p><p>基本操作：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D = &#123;&#125; 或 D = <span class="built_in">dict</span><span class="comment">#空字典对象</span></span><br><span class="line">D = <span class="built_in">dict</span>(name=<span class="string">&#x27;Jack&#x27;</span>, age=<span class="number">45</span>)</span><br><span class="line">D[key] = value</span><br><span class="line">D[newkey] = newvalue</span><br><span class="line"><span class="keyword">del</span> D[key], D.clear()</span><br><span class="line">key <span class="keyword">in</span> D</span><br><span class="line"><span class="built_in">len</span>(D)</span><br><span class="line">判断两个字典是否相同：D1==D2</span><br></pre></td></tr></table></figure><p>操作函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"><span class="number">1.</span> keys(), values(), items()</span><br><span class="line"><span class="number">2.</span> get()</span><br><span class="line">D.get(<span class="string">&#x27;a&#x27;</span>) 或 D[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="number">3.</span> pop()</span><br><span class="line"><span class="number">4.</span> update()</span><br><span class="line">D.update(c=<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>例：词频统计</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ma</span>():</span><br><span class="line">    txt = <span class="built_in">input</span>(<span class="string">&quot;input text:&quot;</span>)</span><br><span class="line">    wordC = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="string">&#x27;!,.;:\n\t()#@- &#x27;</span>:</span><br><span class="line">        txt = txt.replace(e, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    L = txt.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    L.sort()</span><br><span class="line">    <span class="keyword">while</span> L[<span class="number">0</span>].isdigit() <span class="keyword">or</span> L[<span class="number">0</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">del</span> L[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">if</span> e <span class="keyword">in</span> wordC:</span><br><span class="line">            wordC[e] = wordC[e] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            wordC[e] = <span class="number">1</span></span><br><span class="line">    L1 = <span class="built_in">list</span>(wordC.items())</span><br><span class="line">    L1.sort(key=gN, reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(L1)):</span><br><span class="line">        <span class="keyword">if</span> L1[i][<span class="number">1</span>] &gt; <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(L1[i][<span class="number">0</span>], L1[i][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gN</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>无序且不重复，可变集合set和不可变集合frozenset</p><p>操作：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line">s = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s = &#123;(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), <span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">s = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line">s.add(<span class="string">&#x27;zxd&#x27;</span>)</span><br><span class="line">s.update([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), <span class="string">&#x27;zxd&#x27;</span>)<span class="comment">#&#123;0, 1, 2, &#x27;d&#x27;, &#x27;x&#x27;, &#x27;b&#x27;, &#x27;z&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line">s.discard(<span class="string">&#x27;a&#x27;</span>)<span class="comment">#如果元素不存在，不会发生错误</span></span><br><span class="line">s.remove(<span class="string">&#x27;a&#x27;</span>)<span class="comment">#如果元素不存在，会发生错误</span></span><br><span class="line">s.pop()</span><br><span class="line">s.clear()</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="built_in">len</span>(D)</span><br></pre></td></tr></table></figure><p>集合间的关系运算：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.issubset(t)</span><br><span class="line">s.isuperset(t)</span><br></pre></td></tr></table></figure><p>例：验证哥德巴赫猜想：任何一个超过2的偶数都可以写成两个素数之和</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pm</span>():</span><br><span class="line">    N = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input a even number:&quot;</span>))</span><br><span class="line">    <span class="keyword">while</span> N &lt;= <span class="number">3</span> <span class="keyword">or</span> N % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;not qualified!&quot;</span>)</span><br><span class="line">        N = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input a even number:&quot;</span>))</span><br><span class="line">    pme = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, N+<span class="number">1</span>):</span><br><span class="line">        pme.add(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> pme:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>*i, N+<span class="number">1</span>, i):</span><br><span class="line">                <span class="keyword">if</span> k <span class="keyword">in</span> pme:</span><br><span class="line">                    pme.remove(k)</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> pme:</span><br><span class="line">        f = N - e</span><br><span class="line">        <span class="keyword">if</span> f &gt;= e <span class="keyword">and</span> f <span class="keyword">in</span> pme:</span><br><span class="line">            <span class="built_in">print</span>(N,<span class="string">&#x27;=&#x27;</span>,e,<span class="string">&#x27;+&#x27;</span>,f)</span><br></pre></td></tr></table></figure><h3 id="第5章-网络程序设计"><a href="#第5章-网络程序设计" class="headerlink" title="第5章 网络程序设计"></a>第5章 网络程序设计</h3><h4 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h4><h5 id="基于UDP协议"><a href="#基于UDP协议" class="headerlink" title="基于UDP协议"></a>基于UDP协议</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 1.建立流式套接字，返回套接字号</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"><span class="comment"># 2.套接字s与本地地址绑定</span></span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">5005</span>))</span><br><span class="line"><span class="comment"># 3.在套接字上读写数据</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;client has exited&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;received:&#x27;</span>, data, <span class="string">&#x27;from&#x27;</span>, addr)</span><br><span class="line"><span class="comment"># 4.关闭套接字s</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 1.建立流式套接字，返回套接字号</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">port = <span class="number">5005</span></span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="comment"># 2.在套接字上读写数据</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    s.sendto(msg.encode(<span class="string">&quot;utf-8&quot;</span>), (host, port))</span><br><span class="line"><span class="comment"># 3.关闭套接字s</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h5 id="基于TCP协议"><a href="#基于TCP协议" class="headerlink" title="基于TCP协议"></a>基于TCP协议</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line">host = <span class="string">&#x27;&#x27;</span></span><br><span class="line">port = <span class="number">4700</span></span><br><span class="line">Buf = <span class="number">1024</span></span><br><span class="line">addr = (host, port)</span><br><span class="line">s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)</span><br><span class="line">s.bind(addr)</span><br><span class="line">s.listen(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;等待客户连接...\r\n&#x27;</span>)</span><br><span class="line">    cs, caddr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;连接来自于：&#x27;</span>, caddr)</span><br><span class="line">    data = <span class="string">&#x27;欢迎你的到来！\r\n&#x27;</span></span><br><span class="line">    cs.sendall(<span class="built_in">bytes</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data = cs.recv(Buf).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    data = <span class="string">&#x27;[%s]%s\r\n&#x27;</span>%(ctime(), data)</span><br><span class="line">    cs.sendall(<span class="built_in">bytes</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    cs.close()</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">buf = <span class="number">1024</span></span><br><span class="line">addr = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">4700</span>)</span><br><span class="line">cs = socket(AF.INET, SOCK_STRAM, <span class="number">0</span>)</span><br><span class="line">cs.connect(addr)</span><br><span class="line"><span class="keyword">if</span> data:</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        cs.sendall(<span class="built_in">bytes</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        data = cs.recv(buf).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">cs.close()</span><br></pre></td></tr></table></figure><p>进程：资源的分配和调度的一个独立单元</p><p>线程：CPU调度的基本单元</p><p>线程是轻量级的线程</p><h6 id="基于TCP协议的进程级网络通信程序"><a href="#基于TCP协议的进程级网络通信程序" class="headerlink" title="基于TCP协议的进程级网络通信程序"></a>基于TCP协议的进程级网络通信程序</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">conn, addr</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmsg = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cmsg:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            conn.send(cmsg.upper())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">     conn.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主进程开始&quot;</span>)</span><br><span class="line">    server = socket()</span><br><span class="line">    ip_port = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>)</span><br><span class="line">    server.bind(ip_port)</span><br><span class="line">    server.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, caddr = server.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;连接来自于：&quot;</span>, addr)</span><br><span class="line">        p = Process(target=talk, args=(conn, caddr))</span><br><span class="line">        p.start()</span><br><span class="line">    server.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">client = socket()</span><br><span class="line">ip_port = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>)</span><br><span class="line">client.connect(ip_port)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    inp = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;:&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inp: <span class="keyword">continue</span></span><br><span class="line">    client.send(inp.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    smsg = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;来自服务器端的消息：&quot;</span>, smsg.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><h6 id="基于TCP协议的线程级网络通信程序"><a href="#基于TCP协议的线程级网络通信程序" class="headerlink" title="基于TCP协议的线程级网络通信程序"></a>基于TCP协议的线程级网络通信程序</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">socket_list = []</span><br><span class="line">s = socket.socket()</span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">30000</span>))</span><br><span class="line">s.listen()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_client</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> s.recv(<span class="number">2048</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(addr) + <span class="string">&#x27;Left!&#x27;</span>)</span><br><span class="line">        socket_list.remove(s)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">socket_target</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            content = read_client(s)</span><br><span class="line">            <span class="keyword">if</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(content)</span><br><span class="line">                <span class="keyword">for</span> client <span class="keyword">in</span> socket_list:</span><br><span class="line">                    client.send((<span class="built_in">str</span>(addr)+<span class="string">&#x27;say:&#x27;</span>+content).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">     <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = s.accept()</span><br><span class="line">        socket_list.append(conn)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(addr)+<span class="string">&#x27;Joined!&#x27;</span>)</span><br><span class="line">    threading.Thread(target=socket_target, args=(conn,)).start()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">30000</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_server</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        content = s.recv(<span class="number">2048</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">threading.Thread(target=read_server, args=(s,)).start()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line = <span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> line == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    s.send(line.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="Internet编程"><a href="#Internet编程" class="headerlink" title="Internet编程"></a>Internet编程</h4><h5 id="Web资源访问"><a href="#Web资源访问" class="headerlink" title="Web资源访问"></a>Web资源访问</h5><p>urllib.request：打开和读取URL</p><p>urllib.parse：解析URL</p><p>urllib.error：urllib.request引发的异常</p><p>urllib.robotparse：解析robots文件</p><ol><li><p>urllib.request获取资源</p><p>urlopen()</p><p>info()：远程服务器返回的头信息</p><p>getcode()：状态码</p><p>geturl()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例：打开一个网站，显示头部信息、访问状态、网址及网页上前30行信息</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">content = urllib.request.urlopen(<span class="string">&quot;http://www.edu.cn&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(content.info())</span><br><span class="line"><span class="built_in">print</span>(content.getcode())</span><br><span class="line"><span class="built_in">print</span>(content.geturl())</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> content.readlines():</span><br><span class="line">    <span class="built_in">print</span>(line.decode(<span class="string">&#x27;gb2312&#x27;</span>))</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><p>urllib.request保存web资源</p><p><code>content = urllib.request.urlretrieve(&#39;http://www.edu.cn&#39;, &#39;c:\\zxd.htm&#39;)</code></p></li><li><p>urllib.request的Request实例</p><p><code>urllib.request.Request(key=value[,key=value,...])</code></p></li><li><p>对url进行编码、解码的有用方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urllib.quote()</span><br><span class="line">urllib.unquote()</span><br><span class="line">urllib.quote_plus()</span><br><span class="line">urllib.unquote_plus()</span><br></pre></td></tr></table></figure></li><li><p>向服务器传递参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">url = <span class="string">&quot;http://search.jd.com/Search&quot;</span></span><br><span class="line">values = &#123;<span class="string">&#x27;enc&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>: <span class="string">&#x27;平板电脑&#x27;</span>&#125;</span><br><span class="line">data = urllib.parse.urlencode(values)</span><br><span class="line">kv = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0&#x27;</span>&#125;</span><br><span class="line">req = urllib.request.Request(url=url+<span class="string">&#x27;?&#x27;</span>+data, headers=kv)</span><br><span class="line">content = urllib.request.urlopen(req)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> content:</span><br><span class="line">    <span class="built_in">print</span>(line.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">60</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">content = urllib.request.urlretrieve(url+<span class="string">&#x27;?&#x27;</span>+data, <span class="string">&#x27;zxd.htm&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h5 id="邮件客户端编程"><a href="#邮件客户端编程" class="headerlink" title="邮件客户端编程"></a>邮件客户端编程</h5><h3 id="第7章-数据存储及数据库程序设计"><a href="#第7章-数据存储及数据库程序设计" class="headerlink" title="第7章 数据存储及数据库程序设计"></a>第7章 数据存储及数据库程序设计</h3><h4 id="文件形式的存储"><a href="#文件形式的存储" class="headerlink" title="文件形式的存储"></a>文件形式的存储</h4><p>写文件：write&#x2F;writelines</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;tets.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        L = [<span class="string">&#x27;hit&#x27;</span>, <span class="string">&#x27;wh&#x27;</span>]</span><br><span class="line">        f.writelines(L)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件创建失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>读文件：read</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 精确读</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;tets.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.read(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(f.tell())</span><br><span class="line">        f.seek(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;FileNotFoundError&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 按行读</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;tets.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            <span class="built_in">print</span>(line)</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;FileNotFoundError&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="第9章-图形用户界面"><a href="#第9章-图形用户界面" class="headerlink" title="第9章 图形用户界面"></a>第9章 图形用户界面</h3><h4 id="Pack布局"><a href="#Pack布局" class="headerlink" title="Pack布局"></a>Pack布局</h4><p><code>组件.pack([属性名=属性值, 属性名=属性值,...])</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line">root = Tk()</span><br><span class="line">w = Label(root, text=<span class="string">&quot;red sun&quot;</span>, bg=<span class="string">&quot;red&quot;</span>, fg=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">w.pack(padx=<span class="number">5</span>, pady=<span class="number">10</span>, side=LEFT)</span><br><span class="line">mainloop()</span><br></pre></td></tr></table></figure><h4 id="Frame-pack"><a href="#Frame-pack" class="headerlink" title="Frame+pack"></a>Frame+pack</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line">root = Tk()</span><br><span class="line">root.title(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">root.geometry(<span class="string">&quot;470x280&quot;</span>)</span><br><span class="line">frm = Frame(root)</span><br><span class="line">frm_S = Frame(frm)</span><br><span class="line">Button(frm_S, text=<span class="string">&quot;send&quot;</span>, width=<span class="number">6</span>, height=<span class="number">1</span>).pack(side=LEFT)</span><br><span class="line">Button(frm_S, text=<span class="string">&quot;reset&quot;</span>, width=<span class="number">6</span>, height=<span class="number">1</span>).pack(side=RIGHT)</span><br><span class="line">frm_S.pack(side=TOP)</span><br><span class="line">frm.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h3 id="第8章-微服务"><a href="#第8章-微服务" class="headerlink" title="第8章 微服务"></a>第8章 微服务</h3><p>返回HTML文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line">user_list = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        temp = &#123;<span class="string">&#x27;user&#x27;</span>: username, <span class="string">&#x27;pwd&#x27;</span>: password&#125;</span><br><span class="line">        user_list.append(temp)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;data&#x27;</span>: user_list&#125;)</span><br></pre></td></tr></table></figure><p>创建模型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    book_name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    add_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__unicode__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.book_name</span><br></pre></td></tr></table></figure><p>创建服务api</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@require_http_methods(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_book</span>(<span class="params">request</span>):</span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        book = Book(book_name=request.GET.get(<span class="string">&#x27;book_name&#x27;</span>))</span><br><span class="line">        book.save()</span><br><span class="line">        response[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;success&#x27;</span></span><br><span class="line">        response[<span class="string">&#x27;error_num&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        response[<span class="string">&#x27;msg&#x27;</span>] = <span class="built_in">str</span>(e)</span><br><span class="line">        response[<span class="string">&#x27;error_num&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(response)</span><br><span class="line"></span><br><span class="line"><span class="meta">@require_http_methods(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_books</span>(<span class="params">request</span>):</span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        book = Book.objects.<span class="built_in">filter</span>()</span><br><span class="line">        response[<span class="string">&#x27;list&#x27;</span>] = json.loads(serializers.serialize(<span class="string">&quot;json&quot;</span>, books))</span><br><span class="line">        response[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;success&#x27;</span></span><br><span class="line">        response[<span class="string">&#x27;error_num&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        response[<span class="string">&#x27;msg&#x27;</span>] = <span class="built_in">str</span>(e)</span><br><span class="line">        response[<span class="string">&#x27;error_num&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(response)</span><br></pre></td></tr></table></figure><p>添加接口</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^add_book$&#x27;</span>, views.add_book),</span><br><span class="line">    url(<span class="string">r&#x27;^show_book$&#x27;</span>, views.show_books)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>解决跨域</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;corsheaders.middleware.CorsMiddleware&quot;</span>,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第2章-控制结构与异常处理&quot;&gt;&lt;a href=&quot;#第2章-控制结构与异常处理&quot; class=&quot;headerlink&quot; title=&quot;第2章 控制结构与异常处理&quot;&gt;&lt;/a&gt;第2章 控制结构与异常处理&lt;/h3&gt;&lt;h4 id=&quot;循环程序设计&quot;&gt;&lt;a href=&quot;#循环程</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript advance</title>
    <link href="http://example.com/2022/10/04/JS%E9%AB%98%E7%BA%A7/"/>
    <id>http://example.com/2022/10/04/JS%E9%AB%98%E7%BA%A7/</id>
    <published>2022-10-04T15:22:14.473Z</published>
    <updated>2022-10-04T15:25:05.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基础总结深入"><a href="#一、基础总结深入" class="headerlink" title="一、基础总结深入"></a>一、基础总结深入</h3><h4 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h4><ol><li><p>分类</p><p>基本(值)类型</p><ul><li>String：任意字符串</li><li>Number：任意的数字</li><li>boolean：true &#x2F; false</li><li>undefined：undefined</li><li>null：null</li></ul><p>对象(引用)类型</p><ul><li>Object：任意对象</li><li>Function：一种特别的对象(可以执行)</li><li>Array：一种特别的对象(数值下标，内部数据是有序的)</li></ul></li><li><p>判断</p><ul><li><p>typeof</p><p>可以判断：undefined，数值，字符串，布尔值，function</p><p>不能判断：null 与 object，object 与 array</p><p>返回数据类型的<strong>字符串表达</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="keyword">typeof</span> a)<span class="comment">// undefined &quot;undefined&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> a === <span class="string">&#x27;undefined&#x27;</span><span class="comment">// true</span></span><br><span class="line">a === <span class="literal">undefined</span><span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>instanceof</p><p>判断对象的具体类型</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b1 = &#123;</span><br><span class="line"><span class="attr">b2</span>: [<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="variable language_">console</span>.<span class="property">log</span>],</span><br><span class="line">    <span class="attr">b3</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b3&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;xfzhang&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b1.<span class="property">b2</span> <span class="keyword">instanceof</span> <span class="title class_">Array</span>, b1.<span class="property">b2</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>)<span class="comment">// true true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b1.<span class="property">b3</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>, b1.<span class="property">b3</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>)<span class="comment">// true true</span></span><br><span class="line">b1.<span class="property">b2</span>[<span class="number">2</span>](<span class="number">4</span>)<span class="comment">//加小括号是在调用函数，结果输出4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b1.<span class="title function_">b3</span>()())<span class="comment">//xfzhang</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b1.<span class="property">b2</span>)<span class="comment">// object(typeof不能区分object和array!)</span></span><br></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;&#x3D; &#x2F; &#x3D;&#x3D;</p><p>可以判断：undefined, null</p></li></ul></li><li><p>相关问题</p><ol><li><p>undefined 与 null 的区别</p><p>undefined 代表定义未赋值</p><p>null 定义并赋值了，只是值为 null</p></li><li><p>什么时候给变量赋值为 null ？</p><p>初始赋值，表明将要赋值为对象</p><p>结束前，让对象成为垃圾对象(被垃圾回收机回收)</p></li><li><p>严格区别变量类型与数据类型</p><p>数据的类型</p><p>​基本类型</p><p>​对象类型</p><p>变量的类型(变量内存值的类型)</p><p>​基本类型：保存的是基本类型的数据</p><p>​引用类型：保存的是地址值</p></li></ol></li></ol><h4 id="2、数据-变量-内存"><a href="#2、数据-变量-内存" class="headerlink" title="2、数据-变量-内存"></a>2、数据-变量-内存</h4><ol><li><p>什么是数据</p><p>存储在内存中代表特定信息的东西</p></li><li><p>什么是内存</p><p>内存条充电后产生的可存储数据的空间</p><p>内存分类：</p><p>​栈：全局变量、局部变量</p><p>​堆：对象</p></li><li><p>什么是变量</p><p>可变化的量，由变量名和变量值组成</p><p>每个变量都对应的一块小内存，变量名用来查找对应的内存，变量值就是内存中保存的数据</p></li><li><p>相关问题</p><ul><li><p>问题：在 js 调用函数时传递变量参数时，是值传递还是引用传递</p><p>理解1：都是值(基本&#x2F;地址值)传递</p><p>理解2：可能是值传递，也可能是引用传递(地址值)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    obj =  &#123;<span class="attr">age</span>: <span class="number">15</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// 13</span></span><br></pre></td></tr></table></figure></li><li><p>问题：JS 引擎如何管理内存？</p><ol><li><p>内存生命周期</p><p>分配小内存空间，得到它的使用权</p><p>存储数据，可以反复进行操作</p><p>释放小内存空间</p></li><li><p>释放内存</p><p>局部变量：函数执行完自动释放</p><p>对象：成为垃圾对象 &#x3D;&#x3D;&gt; 垃圾回收器回收</p></li></ol></li></ul></li></ol><h4 id="3、对象"><a href="#3、对象" class="headerlink" title="3、对象"></a>3、对象</h4><ol><li><p>什么是对象</p><p>多个数据的封装体</p><p>用来保存多个数据的容器</p></li><li><p>为什么要用对象</p><p>统一管理多个数据</p></li><li><p>对象的组成</p><p>属性：属性名(字符串)和属性值(任意)组成</p><p>方法：一种特别的属性，属性值是函数</p></li><li><p>如何得到对象内部属性</p><p>.属性名：编码简单但有时不能用</p><p>[‘属性名’]：编码麻烦但能通用</p><p>问题：什么时候必须使用<code>[&#39;属性名&#39;]</code>的方式？</p><ol><li><p>属性名包含特殊字符： -    空格</p><p><code>p[&#39;content-type&#39;] = &#39;text/json&#39;</code></p></li><li><p>变量名不确定</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> propName = <span class="string">&#x27;myAge&#x27;</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">18</span></span><br><span class="line">p[propName] = value</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h4><ol><li><p>什么是函数</p><p>实现特定功能的语句的封装体</p><p>只有函数是可以执行的，其他类型的数据不能执行</p></li><li><p>为什么要用函数</p><p>提高代码复用</p></li><li><p>如何定义函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;f1()&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 表达式</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;f2()&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如何调用函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>()：直接调用</span><br><span class="line">obj.<span class="title function_">test</span>()：通过对象调用</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">test</span>()：<span class="keyword">new</span>调用</span><br><span class="line">test.<span class="property">call</span>/<span class="title function_">apply</span>(obj)：临时让test成为obj的方法</span><br><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">xxx</span> = <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// obj.test()//不能直接调用，根本就没有</span></span><br><span class="line">test.<span class="title function_">call</span>(obj)</span><br></pre></td></tr></table></figure></li><li><p>回调函数</p><ol><li><p>什么函数才是回调函数？</p><p>1）你定义的</p><p>2）你没有调</p><p>3）但最终执行了</p></li><li><p>常见的回调函数</p><p>dom 事件回调函数</p><p>定时器回调函数</p><p>ajax 请求回调函数</p><p>生命周期回调函数</p></li></ol></li><li><p>IIFE（Immediately-Invoked Function Expression）</p><p>作用：</p><p>​隐藏实现</p><p>​不会污染外部(全局)命名空间</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//匿名函数自调用</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + <span class="number">3</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(++a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">$</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//向外暴露一个全局函数</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">test</span>:test</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">$().<span class="title function_">test</span>()<span class="comment">//2</span></span><br></pre></td></tr></table></figure></li><li><p>函数中的 this</p><ol><li><p>this 是什么</p><p>任何函数本质上都是通过某个对象来调用的，如果没有直接指定就是 window</p><p>所有函数内部都有一个变量 this，它的值是调用函数的当前对象</p></li><li><p>如何确定 this 的值</p><p>test()：window</p><p>p.test()：p</p><p>new test()：新创建的对象</p><p>p.call(obj)：obj</p></li></ol></li><li><p>关于语句分号问题</p><p>在以下两种情况下不加分号会有问题：</p><p>小括号开头的前一条语句</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">;(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">/* 错误理解 */</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>中方括号开头的前一条语句</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">4</span></span><br><span class="line">;[<span class="number">1</span>, <span class="number">3</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* 错误理解 */</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>[<span class="number">3</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="二、函数高级"><a href="#二、函数高级" class="headerlink" title="二、函数高级"></a>二、函数高级</h3><h4 id="1、原型与原型链"><a href="#1、原型与原型链" class="headerlink" title="1、原型与原型链"></a>1、原型与原型链</h4><ol><li><p>原型</p><ol><li><p>函数的 prototype 属性</p><p>每个函数都有一个 prototype 属性，默认指向一个 Object 空对象，即：原型对象</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure><p> 但 Object 不满足</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>)<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p> 原型对象中有一个属性 constructor，它指向函数对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Fun</span></span><br></pre></td></tr></table></figure></li><li><p>给原型对象添加属性（一般都是方法）</p><p> 作用：函数的所有实例对象自动拥有原型中的属性</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">test</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test()&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>显式原型和隐式原型</p><ol><li>每个函数都有一个 prototype，即显式原型（属性），是在定义函数是自动添加的</li><li>每个实例对象都有一个 <code>__proto__</code>，即隐式原型（属性），是在创建对象时自动添加的</li><li>对象的隐式原型的值为其对应构造函数的显式原型的值</li></ol></li><li><p>原型链</p><p>所有函数都是 Function 的实例（包含 Function）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>)<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>Object 的原型对象是原型链的尽头</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Obect</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>)<span class="comment">//null</span></span><br></pre></td></tr></table></figure></li><li><p>属性问题</p><p>读取对象的属性值时，会自动到原型链中查找</p><p>设置对象的属性时：不会查找原型链，如果当前对象没有此属性，直接添加此属性并设置其值</p><p>方法一般定义在原型中，属性一般通过构造函数定义在对象本身上</p></li><li><p>探索 instanceof</p><ol><li><p>instanceof 是如何判断的</p><p>A instanceof B</p><p>如果 B 函数的显式原型对象在 A 对象的原型链上，返回 true，否则返回 false</p></li><li><p>Function 是通过 new 自己产生的实例</p></li></ol></li><li><p>面试题</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试题1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">n</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">A</span>()</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">m</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="title function_">A</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">n</span>, b.<span class="property">m</span>, c.<span class="property">n</span>, c.<span class="property">m</span>)<span class="comment">// 1 undefined 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试题2</span></span><br><span class="line"><span class="keyword">var</span> F = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a()&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">b</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b()&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">f.<span class="title function_">a</span>()</span><br><span class="line"><span class="comment">//f.b()</span></span><br><span class="line">F.<span class="title function_">a</span>()</span><br><span class="line">F.<span class="title function_">b</span>()</span><br></pre></td></tr></table></figure></li></ol><h4 id="2、执行上下文与执行上下文栈"><a href="#2、执行上下文与执行上下文栈" class="headerlink" title="2、执行上下文与执行上下文栈"></a>2、执行上下文与执行上下文栈</h4><ol><li><p>变量提升与函数提升</p><ol><li><p>变量声明提升</p><p>通过 var 定义（声明）的变量，在定义语句之前就可以访问到</p><p>值：undefined</p></li><li><p>函数声明提升</p><p>通过 function 声明的函数，在之前就可以直接调用</p><p>值：函数定义（对象）</p></li></ol></li><li><p>执行上下文</p><ol><li><p>代码分类（位置）：全局代码、函数（局部）代码</p></li><li><p>全局执行上下文</p><p>在执行全局代码前将 window 确定为全局执行上下文</p><p>对全局数据进行预处理</p><p>​var 定义的全局变量 &#x3D;&#x3D;&gt; undefined，添加为 window 的属性</p><p>​function 声明的全局函数 &#x3D;&#x3D;&gt; 赋值（fun），添加为 window 的方法</p><p>​this &#x3D;&#x3D;&gt; 赋值（window）</p><p>开始执行全局代码</p></li><li><p>函数执行上下文</p><p>在调用函数，准备执行函数体之前，创建对应的函数执行上下文</p><p>对局部数据进行预处理</p><p>​形参变量 &#x3D;&#x3D;&gt; 赋值（实参） &#x3D;&#x3D;&gt; 添加为执行上下文的属性</p><p>​arguments &#x3D;&#x3D;&gt; 赋值（实参列表） &#x3D;&#x3D;&gt; 添加为执行上下文的属性</p><p>​var 定义的局部变量 &#x3D;&#x3D;&gt; undefined，添加为执行上下文的属性</p><p>​function 声明的全局函数 &#x3D;&#x3D;&gt; 赋值（fun），添加为执行上下文的方法</p><p>​this &#x3D;&#x3D;&gt; 赋值（调用函数的对象）</p><p>开始执行函数体代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">a1</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1)<span class="comment">//2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a2)<span class="comment">//undefined</span></span><br><span class="line">    <span class="title function_">a3</span>()<span class="comment">//a3()</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">lgo</span>(<span class="variable language_">this</span>)<span class="comment">//window</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)<span class="comment">//伪数组(2,3)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> a2 = <span class="number">3</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a3</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a3()&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>执行上下文栈</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span><span class="comment">//1.进入全局执行上下文</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">5</span></span><br><span class="line">    <span class="title function_">foo</span>(x+b)<span class="comment">//3.进入foo执行上下文</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">5</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a+c+y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">10</span>)<span class="comment">//2.进入bar1执行上下文</span></span><br></pre></td></tr></table></figure></li><li><p>面试题</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试题1：先执行变量提升，再执行函数提升</span></span><br><span class="line">fucntion <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a)<span class="comment">//&#x27;function&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试题2：</span></span><br><span class="line"><span class="keyword">if</span>(!(b <span class="keyword">in</span> <span class="variable language_">window</span>)) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//undefined\</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试题3：</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">c</span>(<span class="number">2</span>)<span class="comment">//报错：c不是一个函数</span></span><br><span class="line"><span class="comment">//测试题3相当于：</span></span><br><span class="line"><span class="keyword">var</span> c</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="title function_">c</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="3、作用域与作用域链"><a href="#3、作用域与作用域链" class="headerlink" title="3、作用域与作用域链"></a>3、作用域与作用域链</h4><ol><li><p>作用域与执行上下文</p><ol><li><p>区别1</p><p>全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了，而不是在函数调用时</p><p>全局执行上下文环境是在全局作用域确定之后，js 代码马上执行之前创建</p><p>函数执行上下文是在调用函数时，函数体代码执行之前创建</p></li><li><p>区别2</p><p>作用域是静态的，只要函数<strong>定义</strong>好了就一直存在，且不会发生变化</p><p>执行上下文是动态的，<strong>调用</strong>函数时创建，函数调用结束时就会自动释放</p></li><li><p>联系</p><p>上下文环境（对象）是从属于所在的作用域</p></li></ol></li><li><p>面试题</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试题1</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">f</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">20</span></span><br><span class="line">    <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">show</span>(fn)<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试题2</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fn)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()<span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">fn2</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(fn2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn2</span>()<span class="comment">//报错</span></span><br><span class="line"><span class="comment">//如何改正？</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">fn2</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">fn2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn2</span>()<span class="comment">//输出</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="4、闭包"><a href="#4、闭包" class="headerlink" title="4、闭包"></a>4、闭包</h4><ol start="0"><li><p>引入例子</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求：点击某个按钮，提示点击的是第几个按钮</span></span><br><span class="line"><span class="comment">// 遍历加监听方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, length = btns.<span class="property">length</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> btn = btns[i]</span><br><span class="line">    btn.<span class="property">index</span> = i</span><br><span class="line">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;第&#x27;</span> + (i+<span class="number">1</span>) + <span class="string">&#x27;个按钮&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用闭包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, length = btns.<span class="property">length</span>; i &lt; length; i++) &#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> btn = btn[i]</span><br><span class="line">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;第&#x27;</span> + (i+<span class="number">1</span>) + <span class="string">&#x27;个按钮&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>理解闭包</p><ol><li><p>如何产生闭包？</p><p>当一个嵌套的内部函数引用了嵌套的外部函数的变量时，就产生了闭包</p></li><li><p>闭包到底是什么？</p><p>理解一：闭包是嵌套的内部函数</p><p>理解二：包含被引用变量（函数）的对象</p></li><li><p>产生闭包的条件？</p><p>函数嵌套</p><p>内部函数引用了外部函数的数据（变量&#x2F;函数）</p></li></ol></li><li><p>常见的闭包</p><ul><li><p>将函数作为另一个函数的返回值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a++</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fn1</span>()</span><br><span class="line"><span class="title function_">f</span>()<span class="comment">//3</span></span><br><span class="line"><span class="title function_">f</span>()<span class="comment">//4</span></span><br></pre></td></tr></table></figure></li><li><p>将函数作为实参传递给另一个函数调用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showDelay</span>(<span class="params">msg, time</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(msg)</span><br><span class="line">    &#125;, time)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showDelay</span>(<span class="string">&#x27;atguigu&#x27;</span>, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>闭包的作用</p><ul><li>使函数内部的变量在函数执行完后，仍然存活在内存中（延长了局部变量的生命周期）</li><li>让函数外部可以操作（读写）到函数内部的数据（变量&#x2F;函数）</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基础总结深入&quot;&gt;&lt;a href=&quot;#一、基础总结深入&quot; class=&quot;headerlink&quot; title=&quot;一、基础总结深入&quot;&gt;&lt;/a&gt;一、基础总结深入&lt;/h3&gt;&lt;h4 id=&quot;1、数据类型&quot;&gt;&lt;a href=&quot;#1、数据类型&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Frontend" scheme="http://example.com/categories/Frontend/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript basics</title>
    <link href="http://example.com/2022/10/04/JavaScript/"/>
    <id>http://example.com/2022/10/04/JavaScript/</id>
    <published>2022-10-04T15:22:09.753Z</published>
    <updated>2022-10-04T15:24:34.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript负责页面中的的行为。  </p><p>它是一门运行在浏览器端的脚本语言。  </p><h2 id="JS的编写的位置"><a href="#JS的编写的位置" class="headerlink" title="JS的编写的位置"></a>JS的编写的位置</h2><p>1.可以编写到标签的指定属性中  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello&#x27;);&quot;</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;aaa&#x27;);&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>2.可以编写到script标签中  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript"><span class="comment">//编写js代码  </span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>3.可以将代码编写到外部的js文件中，然后通过标签将其引入  </p><p>script标签一旦用于引入外部文件了，就不能在编写代码了，即使编写了浏览器也会忽略  ,如果需要则可以在创建一个新的script标签用于编写内部代码  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;要输出的内容&quot;</span>);  </span><br></pre></td></tr></table></figure><p>该语句会在浏览器窗口中弹出一个警告框  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;要输出的内容&quot;</span>);  </span><br></pre></td></tr></table></figure><p>该内容将会被写到body标签中，并在页面中显示  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;要输出的内容&quot;</span>);  </span><br></pre></td></tr></table></figure><p>该内容会被写到开发者工具的控制台中  </p><h2 id="基本的语法"><a href="#基本的语法" class="headerlink" title="基本的语法"></a>基本的语法</h2><p>js函数声明不需要；分号，但是赋值语句要加；分号  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">arg0,arg1,arg2</span>)&#123;  </span><br><span class="line"><span class="comment">//函数声明  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">var</span> functionName=<span class="keyword">function</span>(<span class="params">arg0,arg1,arg2</span>)&#123;  </span><br><span class="line"><span class="comment">//函数表达式  </span></span><br><span class="line">&#125;;(注意分号)  </span><br></pre></td></tr></table></figure><p>注释  </p><p>单行注释  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注释内容  </span></span><br></pre></td></tr></table></figure><p>多行注释  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">注释内容  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br></pre></td></tr></table></figure><p>JS严格区分大小写  </p><p>JS中每条语句以分号(;)结尾，如果不写分号，浏览器会自动添加，但是会消耗一些系统资源，而且有些时候，浏览器会加错分号，所以在开发中分号必须写  </p><p>JS中会自动忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。  </p><h2 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h2><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>字面量实际上就是一些固定的值，比如 1 2 3 4 true false null NaN “hello”<br><strong>字面量都是不可以改变的。</strong>  </p><p>由于字面量不是很方便使用，所以在JS中很少直接使用字面量  </p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量可以用来保存字面量，并且可以保存任意的字面量  </p><p>一般都是通过变量来使用字面量，而不直接使用字面量，而且也可以通过变量来对字面量进行一个描述  </p><p>声明变量  </p><p>使用var关键字来声明一个变量  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;  </span><br></pre></td></tr></table></figure><p>为变量赋值 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>; </span><br></pre></td></tr></table></figure><p>声明和赋值同时进行 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">456</span>;   </span><br></pre></td></tr></table></figure><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>在JS中所有的可以自主命名的内容，都可以认为是一个标识符，是标识符就应该遵守标识符的规范。  </p><p>比如：变量名、函数名、属性名  </p><p>规范：<br>1.标识符中可以含有字母、数字、_、$<br>2.标识符不能以数字开头<br>3.标识符不能是JS中的关键字和保留字<br>4.标识符一般采用驼峰命名法<br>xxxYyyZzz  </p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="六种数据类型"><a href="#六种数据类型" class="headerlink" title="六种数据类型"></a>六种数据类型</h2><p> <strong>JS中一共分成六种数据类型 5个基本数据类型+object</strong><br> String 字符串<br> Number 数值<br> Boolean 布尔值<br> Null 空值<br> Undefined 未定义<br> Object 对象  </p><p> 其中基本数据类型有5个  </p><p><strong>typeof运算符检查数据类型</strong>  </p><h3 id="1-String-字符串"><a href="#1-String-字符串" class="headerlink" title="1.String 字符串"></a>1.String 字符串</h3><p>JS中的字符串需要使用引号引起来双引号或单引号都行<br> 在字符串中使用\作为转义字符  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\<span class="string">&#x27;  ==&gt; &#x27;</span>  </span><br><span class="line">\<span class="string">&quot;  ==&gt; &quot;</span>  </span><br><span class="line">\n  ==&gt; 换行  </span><br><span class="line">\t  ==&gt; 制表符  </span><br><span class="line">\\  ==&gt; \  </span><br></pre></td></tr></table></figure><p> 使用typeof运算符检查字符串时，会返回”string”  </p><h3 id="2-Number-数值"><a href="#2-Number-数值" class="headerlink" title="2.Number 数值"></a>2.Number 数值</h3><p> <strong>JS中所有的整数和浮点数都是Number类型</strong>  </p><p>最大能表示的值：Number.MAX_VALUE&#x3D;1.7976931348623157e+308  </p><p> 特殊的数字：能赋值给变量<br>    Infinity 正无穷 a &#x3D; Infinity，能赋值<br>    -Infinity 负无穷<br>    NaN 非法数字（Not A Number）<br>其他进制的数字的表示：<br>0b 开头表示二进制，但是不是所有的浏览器都支持<br>0 开头表示八进制<br>0x 开头表示十六进制  </p><p> 使用typeof检查一个Number类型的数据时，会返回”number”<br>（包括NaN 和 Infinity）  </p><h3 id="3-Boolean-布尔值"><a href="#3-Boolean-布尔值" class="headerlink" title="3.Boolean 布尔值"></a>3.Boolean 布尔值</h3><p> 布尔值主要用来进行逻辑判断，布尔值只有两个<br> true 逻辑的真<br> false 逻辑的假<br> 使用typeof检查一个布尔值时，会返回”boolean”  </p><h3 id="4-Null-空值"><a href="#4-Null-空值" class="headerlink" title="4.Null 空值"></a>4.Null 空值</h3><p> 空值专门用来表示为空的对象，Null类型的值只有一个<br> null<br> 使用typeof检查一个Null类型的值时会返回”object”  </p><h3 id="5-Undefined-未定义"><a href="#5-Undefined-未定义" class="headerlink" title="5.Undefined 未定义"></a>5.Undefined 未定义</h3><p> <strong>如果声明一个变量但是没有为变量赋值此时变量的值就是undefined</strong><br> 该类型的值只有一个 undefined<br> 使用typeof检查一个Undefined类型的值时，会返回”undefined”  </p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p> Object 对象  </p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p> 类型转换就是指将其他的数据类型，转换为String Number 或 Boolean  </p><h3 id="转换为String"><a href="#转换为String" class="headerlink" title="转换为String"></a>转换为String</h3><h4 id="方式一（强制类型转换）："><a href="#方式一（强制类型转换）：" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h4><p> <strong>调用被转换数据的toString()方法</strong><br> 例子：<br>var a &#x3D; 123;<br>a &#x3D; a.toString();<br> 注意：<strong>这个方法不适用于null和undefined</strong><br>由于这两个类型的数据中没有方法，所以调用toString()时会报错  </p><h4 id="方式二（强制类型转换）："><a href="#方式二（强制类型转换）：" class="headerlink" title="方式二（强制类型转换）："></a>方式二（强制类型转换）：</h4><p> <strong>调用String()函数</strong><br> 例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;  </span><br><span class="line">a = <span class="title class_">String</span>(a);  </span><br></pre></td></tr></table></figure><p> 原理：<strong>对于Number Boolean String都会调用他们的toString()方法来将其转换为字符串，对于null值，直接转换为字符串”null”。对于undefined直接转换为字符串”undefined”</strong>  </p><h4 id="方式三（隐式的类型转换）"><a href="#方式三（隐式的类型转换）" class="headerlink" title="方式三（隐式的类型转换）:"></a>方式三（隐式的类型转换）:</h4><p> <strong>为任意的数据类型 +””</strong><br> 例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;  </span><br><span class="line">a = a + <span class="string">&quot;&quot;</span>; </span><br></pre></td></tr></table></figure><p> 原理：和String()函数一样  </p><h3 id="转换为Number"><a href="#转换为Number" class="headerlink" title="转换为Number"></a>转换为Number</h3><h4 id="方式一（强制类型转换）：-1"><a href="#方式一（强制类型转换）：-1" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h4><p> <strong>调用Number()函数</strong><br> 例子： </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;123&quot;</span>;  </span><br><span class="line">s = <span class="title class_">Number</span>(s); </span><br></pre></td></tr></table></figure><p> 转换的情况：  </p><ol><li>字符串 &gt; 数字<br>  如果字符串是一个合法的数字，则直接转换为对应的数字<br>  如果字符串是一个非法的数字，则转换为NaN<br>  如果是一个空串或纯空格的字符串，则转换为0  </li><li>布尔值 &gt; 数字<br>  true转换为1<br> false转换为0  </li><li>空值 &gt; 数字<br>  null转换为0  </li><li>未定义 &gt; 数字<br>  undefined 转换为NaN</li></ol><h4 id="方式二（强制类型转换）：-1"><a href="#方式二（强制类型转换）：-1" class="headerlink" title="方式二（强制类型转换）："></a>方式二（强制类型转换）：</h4><p> 调用parseInt()或parseFloat()<br> 这两个函数专门用来将一个字符串转换为数字的  </p><p>如果对非String使用parseInt()或parseFloat()，它会<strong>先将其转换为String</strong>然后在操作 parseInt()<br> 可以将<strong>一个字符串中的有效的整数位</strong>提取出来，并转换为Number<br> 例子：  </p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123.456px&quot;</span>;  </span><br><span class="line">a = <span class="built_in">parseInt</span>(a); <span class="comment">//123  </span></span><br></pre></td></tr></table></figure><p> 如果需要可以在parseInt()中指定一个第二个参数，来指定进制</p><p>parseFloat()可以将一个<strong>字符串中的有效的小数位</strong>提取出来，并转换为Number<br> 例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123.456px&quot;</span>;  </span><br><span class="line">a = <span class="built_in">parseFloat</span>(a); <span class="comment">//123.456  </span></span><br></pre></td></tr></table></figure><h4 id="方式三（隐式的类型转换）："><a href="#方式三（隐式的类型转换）：" class="headerlink" title="方式三（隐式的类型转换）："></a>方式三（隐式的类型转换）：</h4><p> 使用一元的+来进行隐式的类型转换<br> 例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123&quot;</span>;  </span><br><span class="line">a = +a;  </span><br></pre></td></tr></table></figure><p> <strong>原理：和Number()函数一样</strong>  </p><h3 id="转换为布尔值"><a href="#转换为布尔值" class="headerlink" title="转换为布尔值"></a>转换为布尔值</h3><h4 id="方式一（强制类型转换）：-2"><a href="#方式一（强制类型转换）：-2" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h4><p> 使用Boolean()函数<br> 例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;false&quot;</span>;  </span><br><span class="line">s = <span class="title class_">Boolean</span>(s); <span class="comment">//true </span></span><br></pre></td></tr></table></figure><p>转换的情况<br>字符串 &gt; 布尔<br>     除了空串其余全是true<br>数值 &gt; 布尔<br>     除了0和NaN其余的全是true<br>null、undefined &gt; 布尔<br>     都是false<br>对象 &gt; 布尔<br>     都是true  </p><h4 id="方式二（隐式类型转换）："><a href="#方式二（隐式类型转换）：" class="headerlink" title="方式二（隐式类型转换）："></a>方式二（隐式类型转换）：</h4><p> <strong>为任意的数据类型做两次非运算，即可将其转换为布尔值</strong><br> 例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;hello&quot;</span>;  </span><br><span class="line">a = !!a; <span class="comment">//true  </span></span><br></pre></td></tr></table></figure><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p> 运算符也称为操作符<br> 通过运算符可以对一个或多个值进行运算或操作  </p><h3 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h3><p> 用来检查一个变量的数据类型<br> 语法：typeof 变量<br> 它会返回一个用于描述类型的字符串作为结果  </p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>+&amp;ensp;对两个值进行加法运算并返回结果<br>-&amp;ensp;对两个值进行减法运算并返回结果<br>*&amp;ensp;对两个值进行乘法运算并返回结果<br>&#x2F;&amp;ensp;对两个值进行除法运算并返回结果<br>%&amp;ensp;对两个值进行取余运算并返回结果  </p><p> <strong>除了加法以外，对非Number类型的值进行运算时，都会先转换为Number然后在做运算。</strong><br> 而做加法运算时，如果是两个字符串进行相加，则会做拼串操作，将两个字符连接为一个字符串。<br> 任何值和字符串做加法，都会先转换为字符串，然后再拼串  </p><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><p> 一元运算符只需要一个操作数  </p><h4 id="一元的"><a href="#一元的" class="headerlink" title="一元的+"></a>一元的+</h4><p> 就是正号，不会对值产生任何影响，但是可以将一个非数字转换为数字<br> 例子：    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;  </span><br><span class="line">a = +a;  </span><br></pre></td></tr></table></figure><h4 id="一元的-1"><a href="#一元的-1" class="headerlink" title="一元的-"></a>一元的-</h4><p> 就是负号，可以对一个数字进行符号位取反<br> 例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;  </span><br><span class="line">a = -a;  </span><br></pre></td></tr></table></figure><h4 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h4><p> 自增可以使变量在原值的基础上自增1<br> 自增使用 ++<br> 自增可以使用 前++（++a）后++(a++)<br> 无论是++a 还是 a++都会立即使原变量自增1<br>不同的是++a和a++的值是不同的，<br>    ++a的值是变量的新值（自增后的值）<br>    a++的值是变量的原值（自增前的值）  </p><h4 id="自减"><a href="#自减" class="headerlink" title="自减"></a>自减</h4><p> 自减可以使变量在原值的基础上自减1<br> 自减使用<br> 自减可以使用 前（a）后(a)<br> 无论是a 还是 a都会立即使原变量自减1<br>不同的是a和a的值是不同的，<br>    a的值是变量的新值（自减后的值）<br>    a的值是变量的原值（自减前的值）  </p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>!<br>     非运算可以对一个布尔值进行取反，true变false false边true<br>     当对非布尔值使用!时，会先将其转换为布尔值然后再取反<br>     我们可以利用!来将其他的数据类型转换为布尔值  </p><p>&amp;&amp;<br>     &amp;&amp;可以对符号两侧的值进行与运算<br>     只有两端的值都为true时，才会返回true。只要有一个false就会返回false。<br>     与是一个短路的与，如果第一个值是false，则不再检查第二个值<br>     对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<br>     规则：<br>            1.如果第一个值为false，则返回第一个值<br>            2.如果第一个值为true，则返回第二个值  </p><p>||<br>     ||可以对符号两侧的值进行或运算<br>     只有两端都是false时，才会返回false。只要有一个true，就会返回true。<br>     或是一个短路的或，如果第一个值是true，则不再检查第二个值<br>     对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<br>     规则：<br>            1.如果第一个值为true，则返回第一个值<br>            2.如果第一个值为false，则返回第二个值  </p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>&#x3D; </p><p>​ 可以将符号右侧的值赋值给左侧变量</p><p>+&#x3D;      </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a += <span class="number">5</span> 相当于 a = a+<span class="number">5</span>    </span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;  str += <span class="string">&quot;world&quot;</span>;  </span><br></pre></td></tr></table></figure><p>-&#x3D;    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a -= <span class="number">5</span>  相当于 a = a-<span class="number">5</span>  </span><br></pre></td></tr></table></figure><p>*&#x3D;    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a *= <span class="number">5</span> 相当于 a = a*<span class="number">5</span>  </span><br></pre></td></tr></table></figure><p>&#x2F;&#x3D;    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a /= <span class="number">5</span> 相当于 a = a/<span class="number">5</span>  </span><br></pre></td></tr></table></figure><p>%&#x3D;  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a %= <span class="number">5</span> 相当于 a = a%<span class="number">5</span> </span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p> 关系运算符用来比较两个值之间的大小关系的<br>    &gt;<br>    &gt;&#x3D;<br>    &lt;<br>    &lt;&#x3D;<br> 关系运算符的规则和数学中一致，用来比较两个值之间的关系，<br>    如果关系成立则返回true，关系不成立则返回false。<br> 如果比较的两个值是非数值，会将其转换为Number然后再比较。<br> 如果比较的两个值都是字符串，此时会比较字符串的Unicode编码，而不会转换为Number。  </p><h3 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h3><p> 相等，判断左右两个值是否相等，如果相等返回true，如果不等返回false<br> 相等会自动对两个值进行类型转换，如果<strong>对不同的类型进行比较，会将其转换为相同的类型然后再比较</strong>，转换后相等它也会返回true，null &#x3D;&#x3D; undefined  </p><p>!&#x3D;<br>     不等，判断左右两个值是否不等，如果不等则返回true，如果相等则返回false<br>     不等也会做自动的类型转换。<br><strong>&#x3D;&#x3D;&#x3D;</strong><br>     <strong>全等</strong>，判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换，<br>        如果两个值的类型不同，则直接返回false<br>!&#x3D;&#x3D;<br>     <strong>不全等</strong>，和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，它会直接返回true  </p><p>特殊的值：<br>     null和undefined<br>         由于undefined衍生自null，所以<strong>null &#x3D;&#x3D; undefined</strong> 会返回true。<br>            但是 null &#x3D;&#x3D;&#x3D; undefined 会返回false。<br><strong>NaN</strong><br>     NaN不与任何值相等，包括它自身。NaN &#x3D;&#x3D; NaN &#x2F;&#x2F;false  </p><p> 判断一个值是否是NaN<br>     使用isNaN()函数  </p><h3 id="三元运算符："><a href="#三元运算符：" class="headerlink" title="三元运算符："></a>三元运算符：</h3><p>?:<br>     语法：条件表达式?语句1:语句2;<br>     执行流程：<br>        先对条件表达式求值判断，<br>            如果判断结果为true，则执行语句1，并返回执行结果<br>            如果判断结果为false，则执行语句2，并返回执行结果  </p><p>优先级：<br> 和数学中一样，JS中的运算符也是具有优先级的，<br>    比如 先乘除 后加减 先与 后或<br> 具体的优先级可以参考优先级的表格，在表格中越靠上的优先级越高，<br>    优先级越高的越优先计算，优先级相同的，从左往右计算。<br> 优先级不需要记忆，如果越到拿不准的，使用()来改变优先级。  </p><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><p>程序都是自上向下的顺序执行的，<br>通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。  </p><h3 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a>条件分支语句</h3><p> 条件判断语句也称为if语句<br> 语法一：<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行流程：  </span><br><span class="line">if语句执行时，会先对条件表达式进行求值判断，  </span><br><span class="line">如果值为true，则执行if后的语句  </span><br><span class="line">如果值为false，则不执行  </span><br></pre></td></tr></table></figure><p> 语法二：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行流程：  </span><br><span class="line">if...else语句执行时，会对条件表达式进行求值判断，  </span><br><span class="line">如果值为true，则执行if后的语句  </span><br><span class="line">如果值为false，则执行else后的语句  </span><br></pre></td></tr></table></figure><p> 语法三：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行流程  </span><br><span class="line"> if...else if...else语句执行时，会自上至下依次对条件表达式进行求值判断，  </span><br><span class="line">如果判断结果为true，则执行当前if后的语句，执行完成后语句结束。  </span><br><span class="line">如果判断结果为false，则继续向下判断，直到找到为true的为止。  </span><br><span class="line">如果所有的条件表达式都是false，则执行else后的语句  </span><br></pre></td></tr></table></figure><p>1.条件分支语句<br>switch语句<br>语法:  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(条件表达式)&#123;  </span><br><span class="line"><span class="keyword">case</span> 表达式:  </span><br><span class="line">语句...  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line"><span class="keyword">case</span> 表达式:  </span><br><span class="line">语句...  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line"><span class="keyword">case</span> 表达式:  </span><br><span class="line">语句...  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line"><span class="attr">default</span>:  </span><br><span class="line">语句...  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>执行流程：<br> switch…case…语句在执行时，会依次将case后的表达式的值和switch后的表达式的值进行全等比较，<br>    如果比较结果为false，则继续向下比较。如果比较结果为true，则从当前case处开始向下执行代码。<br>    如果所有的case判断结果都为false，则从default处开始执行代码。  </p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>通过循环语句可以反复执行某些语句多次<br>while循环<br> 语法：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;  </span><br><span class="line">    语句...  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p> 执行流程：<br>    while语句在执行时，会先对条件表达式进行求值判断，<br>        如果判断结果为false，则终止循环<br>        如果判断结果为true，则执行循环体<br>        循环体执行完毕，继续对条件表达式进行求值判断，依此类推  </p><p>do…while循环<br> 语法:  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式)  </span><br></pre></td></tr></table></figure><p> 执行流程<br>    do…while在执行时，会先执行do后的循环体，然后在对条件表达式进行判断，<br>        如果判断判断结果为false，则终止循环。<br>        如果判断结果为true，则继续执行循环体，依此类推  </p><p> 和while的区别：<br>    while：先判断后执行<br>    do…while: 先执行后判断<br>     do…while可以确保循环体至少执行一次。  </p><p>for循环<br> 语法：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(①初始化表达式 ; ②条件表达式 ; ④更新表达式)&#123;  </span><br><span class="line">    ③语句...  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p> 执行流程：<br>    首先执行①初始化表达式，初始化一个变量，<br>    然后对②条件表达式进行求值判断，如果为false则终止循环<br>    如果判断结果为true，则执行③循环体<br>    循环体执行完毕，执行④更新表达式，对变量进行更新。<br>    更新表达式执行完毕重复②  </p><p>死循环  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h1><p>对象是JS中的引用数据类型<br><strong>对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性</strong><br>使用typeof检查一个对象时，会返回object  </p><h2 id="对象的分类："><a href="#对象的分类：" class="headerlink" title="对象的分类："></a>对象的分类：</h2><p>1.内建对象<br>    - 由ES标准中定义的对象，在任何的ES的实现中都可以使用<br>    - 比如：Math String Number Boolean Function Object….  </p><p>2.宿主对象<br>    - 由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象<br>    - 比如 BOM DOM  </p><p>3.自定义对象  </p><pre><code>- 由开发人员自己创建的对象  </code></pre><p>创建对象<br> 方式一：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();  </span><br></pre></td></tr></table></figure><p> 方式二：<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; </span><br></pre></td></tr></table></figure><br><strong>向对象中添加属性</strong><br> 语法：<br>    对象.属性名 &#x3D; 属性值;<br>    <strong>对象[“属性名”] &#x3D; 属性值;</strong>&#x2F;&#x2F;这种方式能够使用特殊的属性名  </p><p><strong>对象的属性名没有任何要求，不需要遵守标识符的规范，但是在开发中，尽量按照标识符的要求去写。</strong><br>属性值也可以任意的数据类型。  </p><p>读取对象中的属性<br> 语法：<br>    对象.属性名<br>    对象[“属性名”] &#x2F;&#x2F;“属性名”可以使字符串常量，也可以是字符串变量<br> 如果读取一个对象中没有的属性，它不会报错，而是返回一个undefined  </p><p><strong>删除对象中的属性</strong><br> 语法：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> 对象.属性名  </span><br><span class="line"><span class="keyword">delete</span> 对象[<span class="string">&quot;属性名&quot;</span>]  </span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p><strong>使用in检查对象中是否含有指定属性</strong><br> 语法：”属性名” in 对象<br>     如果在对象中含有该属性，则返回true<br>        如果没有则返回false  </p><pre><code>循环遍历对象自身的和继承的可枚举属性(不含Symbol属性).  </code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;c&#x27;</span>&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;  </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(i,<span class="string">&quot;:&quot;</span>,obj[i]);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>​<br><strong>使用对象字面量，在创建对象时直接向对象中添加属性</strong><br>语法： </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;  </span><br><span class="line">    属性名:属性值,  </span><br><span class="line">    属性名:属性值,  </span><br><span class="line">    属性名:属性值,  </span><br><span class="line">    属性名:属性值  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>基本数据类型和引用数据类型<br> 基本数据类型<br>    String Number Boolean Null Undefined<br> 引用数据类型<br>    Object<br> <strong>基本数据类型的数据，变量是直接保存的它的值。</strong><br>    变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。<br> <strong>引用数据类型的数据，变量是保存的对象的引用（内存地址）。</strong><br>    如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。<br> 比较两个变量时，对于基本数据类型，比较的就是值，对于引用数据类型比较的是地址，地址相同才相同    </p><h2 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（Function）</h2><p><strong>函数也是一个对象，也具有普通对象的功能（能有属性）</strong><br>函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码<br>使用typeof检查一个函数时会返回function<br>创建函数<br> 函数声明 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名([形参<span class="number">1</span>,形参<span class="number">2.</span>..形参N])&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p> 函数表达式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="keyword">function</span>(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2.</span>..形参N]</span>)&#123;  </span><br><span class="line">语句...  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><p>调用函数<br> 语法：函数对象([实参1,实参2…实参N]);<br>    fun() sum() alert() Number() parseInt()<br> 当我们调用函数时，函数中封装的代码会按照编写的顺序执行  </p><p><strong>立即执行函数</strong><br>函数定义完，立即被调用，这种函数叫做立即执行函数<br>立即执行函数往往只会执行一次</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>+a);  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span>+b);  </span><br><span class="line">&#125;)(<span class="number">123</span>,<span class="number">456</span>); </span><br></pre></td></tr></table></figure><p>遍历对象  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> v <span class="keyword">in</span> obj)&#123;  </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;property：name =&quot;</span>+v+<span class="string">&quot;value=&quot;</span>+obj[v]+<span class="string">&quot;&lt;br/&gt;&quot;</span> );  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>形参和实参<br> 形参：形式参数<br>     定义函数时，可以在()中定义一个或多个形参，形参之间使用,隔开<br>        定义形参就相当于在函数内声明了对应的变量但是并不赋值，形参会在调用时才赋值。<br> 实参：实际参数<br>     调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参,<br>        调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。<br>        <strong>如果实参的数量大于形参，多余实参将不会赋值</strong><br>        <strong>如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined</strong>  </p><p><strong>返回值，就是函数执行的结果。</strong><br> 使用return 来设置函数的返回值。<br> 语法：return 值;<br>     该值就会成为函数的返回值，可以通过一个变量来接收返回值<br> return后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。<br> return后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。<br> <strong>如果return后不跟值，或者是不写return则函数默认返回undefined。</strong><br> break、continue和return<br> break<br>     退出循环<br> continue<br>     跳过当次循环<br> return<br>     退出函数  </p><p><strong>参数，函数的实参也可以是任意的数据类型。</strong>  </p><p><strong>方法（method）</strong><br> 可以将一个函数设置为一个对象的属性，当一个对象的属性是一个函数时，我们称这个函数是该对象的方法。<br> 对象.方法名();<br> 函数名()  </p><h3 id="函数的属性和方法"><a href="#函数的属性和方法" class="headerlink" title="函数的属性和方法"></a>函数的属性和方法</h3><p>call()<br>apply()<br> <strong>这两个方法都是函数对象的方法需要通过函数对象来调用</strong><br> 通过两个方法可以直接调用函数，并且<strong>可以通过第一个实参来指定函数中this</strong><br> 不同的是call是直接传递函数的实参而apply需要将实参封装到一个数组中传递<br><strong>arguments</strong><br> arguments和this类似，都是函数中的隐含的参数<br> arguments是一个类数组元素，它用来封装函数执行过程中的实参<br>    所以即使不定义形参，也可以通过arguments来使用实参<br> <strong>arguments中有一个属性callee表示当前执行的函数对象</strong>  </p><p>this（调用函数的那个对象）<br> this是函数的上下文对象，根据函数的调用方式不同会执向不同的对象<br>    1.以函数的形式调用时，this是window<br>    2.以方法的形式调用时，this是调用方法的对象<br>    3.以构造函数的形式调用时，this是新建的那个对象<br>    4.使用call和apply调用时，this是指定的那个对象<br>    5.在全局作用域中this代表window  </p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域简单来说就是一个变量的作用范围。<br>在JS中作用域分成两种：  </p><p>1.全局作用域  </p><p>直接在script标签中编写的代码都运行在全局作用域中<br><strong>全局作用域在打开页面时创建，在页面关闭时销毁。</strong><br>全局作用域中有一个全局对象window，window对象由浏览器提供，<br>可以在页面中直接使用，它代表的是整个的浏览器的窗口。<br><strong>在全局作用域中创建的变量都会作为window对象的属性保存</strong><br>在全局作用域中创建的函数都会作为window对象的方法保存<br>在全局作用域中创建的变量和函数可以在页面的任意位置访问。<br>在函数作用域中也可以访问到全局作用域的变量。<br>尽量不要在全局中创建变量  </p><p>2.函数作用域  </p><p>函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。<br>函数作用域在函数执行时创建，在函数执行结束时销毁。<br>在函数作用域中创建的变量，不能在全局中访问。<br>当在函数作用域中使用一个变量时，它会先在自身作用域中寻找，<br>如果找到了则直接使用，如果没有找到则到上一级作用域中寻找，<br>如果找到了则使用，找不到则继续向上找，一直会  </p><p> <strong>变量的声明提前</strong><br>     在全局作用域中，使用<strong>var关键字声明的变量会在所有的代码执行之前被声明，但是不会赋值。</strong><br>        所以我们可以在变量声明前使用变量。但是不使用var关键字声明的变量不会被声明提前。<br>     在函数作用域中，也具有该特性，使用var关键字声明的变量会在函数所有的代码执行前被声明，<br>        如果没有使用var关键字声明变量，则变量会变成全局变量  </p><p> <strong>函数的声明提前</strong><br>     在全局作用域中，使用<strong>函数声明创建的函数（function fun(){}）,会在所有的代码执行之前被创建</strong>，<br>        也就是我们可以在函数声明前去调用函数，但是使用函数表达式(var fun &#x3D; function(){})创建的函数没有该特性<br>     在函数作用域中，使用函数声明创建的函数，会在所有的函数中的代码执行之前就被创建好了。  </p><h2 id="this（上下文对象）"><a href="#this（上下文对象）" class="headerlink" title="this（上下文对象）"></a>this（上下文对象）</h2><p>我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。<br>使用this来引用上下文对象，根据函数的调用形式不同，this的值也不同。  </p><p>指向当前对象  </p><p>this的不同的情况：<br>1.以函数的形式调用时，this是window<br>2.以方法的形式调用时，this就是调用方法的对象<br>3.以构造函数的形式调用时，this就是新创建的对象  </p><h2 id="4-构造函数"><a href="#4-构造函数" class="headerlink" title="4.构造函数"></a>4.构造函数</h2><p>构造函数是专门用来创建对象的函数<br><strong>一个构造函数我们也可以称为一个类</strong><br>通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例<br>通过同一个构造函数创建的对象，我们称为一类对象<br>构造函数就是一个普通的函数，只是他的调用方式不同，<br>如果直接调用，它就是一个普通函数<br>如果使用new来调用，则它就是一个构造函数  </p><p>例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name , age , gender</span>)&#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>构造函数的执行流程：<br>1.创建一个新的对象<br>2.将新的对象作为函数的上下文对象（this）<br>3.执行函数中的代码<br>4.将新建的对象返回  </p><p><strong>instanceof 用来检查一个对象是否是一个类的实例</strong><br> 语法：对象 instanceof 构造函数<br>     如果该对象时构造函数的实例，则返回true，否则返回false<br>     <strong>Object是所有对象的祖先，所以任何对象和Object做instanceof都会返回true</strong>  </p><p>枚举对象中的属性<br>for…in<br>语法：    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> 属性名 <span class="keyword">in</span> 对象)&#123;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>for…in语句的循环体会执行多次，对象中有几个属性就会执行几次，<br>    每次讲一个属性名赋值给我们定义的变量，我们可以通过它来获取对象中的属性    </p><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p> 创建一个函数以后，<strong>解析器都会默认在函数中添加一个属性prototype</strong><br>    prototype属性指向的是一个对象，这个对象我们称为原型对象。<br> 当函数作为构造函数使用，<strong>它所创建的对象中都会有一个隐含的属性执行该原型对象。</strong>  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">这个隐含的属性可以通过对象.<span class="property">__proto__</span>来访问。  </span><br></pre></td></tr></table></figure><p><strong>原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。</strong><br>    我们可以将对象中共有的属性和方法统一添加到原型对象中，<br>        这样我们只需要添加一次，就可以使所有的对象都可以使用。<br> 当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，<br>    如果在自身中找到了，则直接使用。<br>    如果没有找到，则去原型对象中寻找，如果找到了则使用，<br>    <strong>如果没有找到，则去原型的原型中寻找，</strong>依此类推。直到找到Object的原型为止，Object的原型的原型为null，<br>    如果依然没有找到则返回undefined<br> <strong>hasOwnProperty()</strong><br>     这个方法可以用来检查<strong>对象自身中</strong>是否含有某个属性<br>     语法：对象.hasOwnProperty(“属性名”)  </p><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><p>当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值  </p><p>如果我们希望在输出对象时不输出[object Object]，可以为对象添加一个toString()方法  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改Person原型的toString  </span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Person[name=&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;,age=&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;,gender=&quot;</span>+<span class="variable language_">this</span>.<span class="property">gender</span>+<span class="string">&quot;]&quot;</span>;  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h2 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h2><p>就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾<br>这些垃圾积攒过多以后，会导致程序运行的速度过慢，<br>所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾<br>当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，<br>此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，<br>所以这种垃圾必须进行清理。<br>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，<br>我们不需要也不能进行垃圾回收的操作<br>我们需要做的只是要将不再使用的对象设置null即可  </p><h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><p> 数组也是一个对象，是一个用来存储数据的对象和Object类似，但是它的存储效率比普通对象要高<br> 数组中保存的内容我们称为元素<br> 数组使用索引（index）来操作元素<br> 索引指由0开始的整数  </p><h2 id="数组的操作："><a href="#数组的操作：" class="headerlink" title="数组的操作："></a>数组的操作：</h2><p> 创建数组  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();  </span><br><span class="line"><span class="keyword">var</span> arr = [];  </span><br></pre></td></tr></table></figure><p>向数组中添加元素<br>语法：数组对象[索引] &#x3D; 值;  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="number">123</span>;  </span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&quot;hello&quot;</span>;  </span><br></pre></td></tr></table></figure><p> 创建数组时直接添加元素<br> 语法：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [元素<span class="number">1</span>,元素<span class="number">2.</span>...元素N]; </span><br></pre></td></tr></table></figure><p> 例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">123</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">true</span>,<span class="literal">null</span>];  </span><br></pre></td></tr></table></figure><p> 获取和修改数组的长度<br>     使用length属性来操作数组的长度<br>     获取长度：<br>        数组.length<br>         length获取到的是数组的最大索引+1<br>         对于连续的数组，length获取到的就是数组中元素的个数<br>     修改数组的长度<br>        数组.length &#x3D; 新长度<br>             如果修改后的length大于原长度，则多出的部分会空出来<br>             如果修改后的length小于原长度，则原数组中多出的元素会被删除<br>     向数组的最后添加元素<br>        数组[数组.length] &#x3D; 值;  </p><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><table><thead><tr><th>functionName</th><th>function</th><th>usage</th></tr></thead><tbody><tr><td>push()</td><td>用来向数组的末尾添加一个或多个元素，并返回数组新的长度</td><td>语法：数组.push(元素1,元素2,元素N)pop()</td></tr><tr><td>pop()</td><td>用来删除数组的最后一个元素，并返回被删除的元素</td><td></td></tr><tr><td>unshift()</td><td>向数组的开头添加一个或多个元素，并返回数组的新的长度</td><td></td></tr><tr><td>shift()</td><td>删除数组的开头的一个元素，并返回被删除的元素</td><td></td></tr><tr><td>reverse()</td><td>可以用来反转一个数组，它会对原数组产生影响</td><td></td></tr><tr><td>concat()</td><td>可以连接两个或多个数组，它不会影响原数组，而是新数组作为返回值返回</td><td></td></tr><tr><td>slice()</td><td>可以从一个数组中截取指定的元素，该方法不会影响原数组，而是将截取到的内容封装为一个新的数组并返回</td><td></td></tr><tr><td>splice()</td><td>可以用来删除数组中指定元素，并使用新的元素替换，该方法会将删除的元素封装到新数组中返回</td><td></td></tr><tr><td>join()</td><td>可以将一个数组转换为一个字符串</td><td></td></tr><tr><td>sort()</td><td>可以对一个数组中的内容进行排序，默认是按照Unicode编码进行排序，调用以后，会直接修改原数组</td><td></td></tr></tbody></table><h3 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice(start,[end])"></a>slice(start,[end])</h3><pre><code> 可以从一个数组中截取指定的元素   该方法不会影响原数组，而是将截取到的内容封装为一个新的数组并返回   参数：      1.截取开始位置的索引（包括开始位置）      2.截取结束位置的索引（不包括结束位置）           第二个参数可以省略不写，如果不写则一直截取到最后       参数可以传递一个负值，如果是负值，则从后往前数  </code></pre><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><pre><code> 可以用来删除数组中指定元素，并使用新的元素替换      该方法会将删除的元素封装到新数组中返回   参数：      1.删除开始位置的索引      2.删除的个数      3.三个以后，都是替换的元素，这些元素将会插入到开始位置索引的前边   例子：var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];      fruits.splice(2,0,&quot;Lemon&quot;,&quot;Kiwi&quot;);//Banana,Orange,Lemon,Kiwi,Apple,Mango</code></pre><h3 id="join-splitor"><a href="#join-splitor" class="headerlink" title="join([splitor])"></a>join([splitor])</h3><p> 可以将一个数组转换为一个字符串<br> 参数：<br>    需要一个字符串作为参数，这个字符串将会作为连接符来连接数组中的元素<br>    如果不指定连接符则默认使用,  </p><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p> 可以对一个数组中的内容进行排序，默认是按照Unicode编码进行排序<br>    调用以后，会直接修改原数组。<br> 可以自己指定排序的规则，需要一个回调函数作为参数：  </p><p>我们可以自己来指定排序的规则<br>我们可以在sort()添加一个回调函数，来指定排序规则，<br>    回调函数中需要定义两个形参,<br>    浏览器将会分别使用数组中的元素作为实参去调用回调函数<br>    使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边  </p><ul><li><p>浏览器会根据回调函数的返回值来决定元素的顺序，<br>  如果返回一个大于0的值，则元素会交换位置<br>  如果返回一个小于0的值，则元素位置不变<br>  如果返回一个0，则认为两个元素相等，也不交换位置  </p></li><li><p>如果需要升序排列，则返回 a-b<br>  如果需要降序排列，则返回b-a</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">a,b</span>)&#123;  </span><br><span class="line"><span class="comment">//升序排列  </span></span><br><span class="line"><span class="comment">//return a-b;  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//降序排列  </span></span><br><span class="line"><span class="keyword">return</span> b-a;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p> 遍历数组就是将数组中元素都获取到<br> 一般情况我们都是使用for循环来遍历数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;数组.<span class="property">length</span> ; i++)&#123;  </span><br><span class="line">    <span class="comment">//数组[i]  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p> 使用forEach()方法来遍历数组（不兼容IE8）  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value , index , obj</span>)&#123;  </span><br><span class="line">  </span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure><p>forEach()方法需要一个回调函数作为参数，<br>数组中有几个元素，回调函数就会被调用几次，<br>每次调用时，都会将遍历到的信息以实参的形式传递进来，<br>我们可以定义形参来获取这些信息。<br>value:正在遍历的元素<br>index:正在遍历元素的索引<br>obj:被遍历对象    </p><h1 id="常用类和方法"><a href="#常用类和方法" class="headerlink" title="常用类和方法"></a>常用类和方法</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>在JS中为我们提供了<strong>三个包装类：</strong><br>String() Boolean() Number()<br> 通过这三个包装类可以创建基本数据类型的对象<br>例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">2</span>);  </span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);  </span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>); </span><br></pre></td></tr></table></figure><p>但是在实际应用中千万不要这么干。  </p><p>当我们去操作一个基本数据类型的属性和方法时，<br><strong>解析器会临时将其转换为对应的包装类，然后再去操作属性和方法，</strong><br>操作完成以后再将这个临时对象进行销毁。  </p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>日期的对象，在JS中通过Date对象来表示一个时间<br>创建对象<br> 创建一个当前的时间对象  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();  </span><br></pre></td></tr></table></figure><p> 创建一个指定的时间对象  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;月/日/年 时:分:秒&quot;</span>);  </span><br></pre></td></tr></table></figure><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><table><thead><tr><th>name</th><th></th></tr></thead><tbody><tr><td>getDate()</td><td>当前日期对象是几日（1-31）</td></tr><tr><td>getDay()</td><td>返回当前日期对象时周几（0-6）<br/> 0 周日<br/> 1 周一 。。。</td></tr><tr><td>getMonth()</td><td>返回当前日期对象的月份（0-11）<br/> 0 一月 1 二月 。。。</td></tr><tr><td>getFullYear()</td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td>getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td>getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td>getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td>getMilliseconds()</td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td>getTime()</td><td>返回当前日期对象的时间戳<br/> 时间戳，指的是从1970年月1日 0时0分0秒，<strong>到现在时间的毫秒数</strong><br/>计算机底层保存时间都是以时间戳的形式保存的。</td></tr><tr><td>Date.now()</td><td>可以获取当前代码执行时的时间戳</td></tr><tr><td>setHours()</td><td>设置 Date 对象中的小时 (0 ~ 23)</td></tr></tbody></table><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Math属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法<br>我们可以直接使用它来进行数学运算相关的操作<br>方法：<br>Math.PI<br>     常量，圆周率<br>Math.abs()<br>     绝对值运算<br>Math.ceil()<br>     向上取整<br>Math.floor()<br>     向下取整<br>Math.round()<br>     四舍五入取整<br>Math.random()<br>     生成一个01之间的随机数<br>     生成一个xy之间的随机数<br>        Math.round(Math.random()*(y-x)+x);<br>Math.pow(x,y)<br>     求x的y次幂<br>Math.sqrt()<br>     对一个数进行开方<br>Math.max()<br>     求多个数中最大值<br>Math.min()<br>     求多个数中的最小值  </p><h2 id="字符串的相关的方法"><a href="#字符串的相关的方法" class="headerlink" title="字符串的相关的方法"></a>字符串的相关的方法</h2><p>使用ES6中的字符串新方法  </p><p> <strong>String.prototype.padStart(maxLength, fillString&#x3D;’’)</strong> 或 **String.prototype.padEnd(maxLength, fillString&#x3D;’’)**来填充字符串；  </p><p>length<br> 获取字符串的长度<br>charAt()<br> 根据索引获取指定的字符<br>charCodeAt()<br> 根据索引获取指定的字符编码<br><strong>String.fromCharCode()</strong><br> <strong>根据字符编码获取字符</strong><br>indexOf()<br>lastIndexOf()<br> 从一个字符串中检索指定内容<br> 需要一个字符串作为参数，这个字符串就是要检索的内容，<br>    如果找到该内容，则会返回其第一次出现的索引，如果没有找到则返回-1。<br> 可以指定一个第二个参数，来表示开始查找的位置<br> indexOf()是从前向后找<br> lastIndexOf()是从后向前找<br>slice(start,[end])<br> 可以从一个字符串中截取指定的内容，并将截取到内容返回，不会影响原变量<br> 参数：<br>    第一个：截取开始的位置（包括开始）<br>    第二个：截取结束的位置<strong>（不包括结束）</strong><br>         可以省略第二个参数，如果省略则一直截取到最后<br>     可以传负数，如果是负数则从后往前数<br>substr()<br> 和slice()基本一致，不同的是它第二个参数不是索引，而是截取的数量  </p><p>substring()<br> 和slice()基本一致，不同的是它不能接受负值作为参数，如果设置一个负值，则会自动修正为0，<br>    <strong>substring()中如果第二个参数小于第一个，自动调整位置</strong><br>toLowerCase()<br> 将字符串转换为小写并返回<br>toUpperCase()<br> 将字符串转换为大写并返回  </p><h3 id="正则表达相关方法"><a href="#正则表达相关方法" class="headerlink" title="正则表达相关方法"></a>正则表达相关方法</h3><p><strong>split()</strong><br> 可以根据指定内容将一个字符串拆分为一个数组<br> 参数：<br>     需要一个字符串作为参数，将会根据字符串去拆分数组<br>        可以接收一个正则表达式，此时会根据正则表达式去拆分数组  </p><p><strong>match()</strong><br>     可以根据正则表达式，从一个字符串中将符合条件的内容提取出来<br>     默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索<br>        我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容<br>        可以为一个正则表达式设置多个匹配模式，且顺序无所谓<br>     match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果  </p><p><strong>replace()</strong><br>     可以将字符串中指定内容替换为新的内容<br>    参数：<br>        1.被替换的内容，可以接受一个正则表达式作为参数<br>        <strong>2.新的内容</strong>  空串则为删除””<br>    默认只会替换第一个  </p><p><strong>search()</strong><br>     可以搜索字符串中是否含有指定内容<br>     如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回1<br>     它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串<br>     serach()只会查找第一个，即使设置全局匹配也没用  </p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规则，也可以将一个字符串中符合规则的内容提取出来。<br><strong>创建正则表达式</strong><br> var reg &#x3D; new RegExp(“正则”,”匹配模式”); </p><p>注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符，如果要使用\则需要使用\来代替  </p><p> var reg &#x3D; &#x2F;正则表达式&#x2F;匹配模式 （匹配模式可以多个一起写：&#x2F;gi）  </p><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><p>匹配模式：<br>    i:忽略大小写（ignore）<br>    g:全局匹配模式（默认为1次）<br>     设置匹配模式时，可以都不设置，也可以设置1个，也可以全设置，设置时没有顺序要求  </p><p>正则语法<br>    | 或<br>    [] 或<br>    [^ ] 除了  </p><pre><code>**[x-y] x的ascii到y的ascii码之间的值**  </code></pre><p>[a-z] 小写字母 <strong>（也可以[e-i])</strong><br>[A-Z] 大写字母<br>[A-z] 任意字母,<strong>但是还包括了其他ASCII在此之中的</strong><br>[0-9] 任意数字  </p><p>元符号  </p><p>检查一个字符串中是否含有 .<br>  . 表示任意字符<br>  在正则表达式中使用\作为转义字符<br>  . 来表示.<br>  \  表示\  </p><p>  \w<br>    任意字母、数字、_  [A-z0-9_]<br>  \W<br>    除了字母、数字、_  [ ^A-z0-9_]<br>  \d<br>    任意的数字 [0-9]<br>  \D<br>    除了数字 [ ^0-9]<br>  \s<br>    空格<br>  \S<br>    除了空格<br>  \b<br>    单词边界<br>  \B<br>    除了单词边界  </p><p><strong>量词</strong><br>     通过量词可以设置一个内容出现的次数<br>     量词只对它前边的一个内容起作用<br>     {n} 正好出现n次<br>     {m,n} 出现mn次<br>     {m,} m次以上  </p><p>+至少一个，相当于{1,}<br>*个或多个，相当于{0,}<br> ? 0个或1个，相当于{0,1}  </p><p><strong>边界表达式</strong>（不要在java中用，javaScript中用）<br>    ^:正则开始<br>    $:正则结束 ：<strong>注意结束前一个才是结束匹配</strong>  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reg = <span class="regexp">/^a/</span>;  </span><br><span class="line">reg = <span class="regexp">/b$/</span>;  </span><br></pre></td></tr></table></figure><h2 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h2><p>test()<br>     可以用来检查一个字符串是否符合正则表达式<br>     如果符合返回true，否则返回false<br>例子  </p><p>去掉两端的空格:  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;        f    afa    &quot;</span>;   </span><br><span class="line">s = s.<span class="title function_">replace</span>(<span class="regexp">/^\s*|\s*$/g</span>,<span class="string">&quot;&quot;</span>);  </span><br></pre></td></tr></table></figure><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>Document Object Model<br>文档对象模型，通过DOM可以来任意来修改网页中各个内容<br>文档<br> 文档指的是网页，一个网页就是一个文档<br>对象<br> 对象指将网页中的每一个节点都转换为对象<br>    转换完对象以后，就可以以一种纯面向对象的形式来操作网页了<br>模型<br> 模型用来表示节点和节点之间的关系，方便操作页面<br>节点（Node）<br> 节点是构成网页的最基本的单元，网页中的每一个部分都可以称为是一个节点<br> 虽然都是节点，但是节点的类型却是不同的<br> 常用的节点<br>     文档节点 （Document），代表整个网页<br>     元素节点（Element），代表网页中的标签<br>     属性节点（Attribute），代表标签中的属性<br>     文本节点（Text），代表网页中的文本内容  </p><h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><p> DOM查询<br> 在网页中浏览器已经为我们提供了<strong>document对象</strong>，<br>    <strong>它代表的是整个网页，它是window对象的属性，可以在页面中直接使用。</strong><br> document查询方法：<br>     根据元素的id属性查询一个元素节点对象：<br>         document.getElementById(“id属性值”);<br>     根据元素的name属性值查询一组元素节点对象:<br>         document.getElementsByName(“name属性值”);<br>     根据标签名来查询一组元素节点对象：<br>         document.getElementsByTagName(“标签名”);  </p><p> 元素的属性：<br>     <strong>读取元素的属性：</strong><br>        语法：元素.属性名<br>        例子：ele.name<br>              ele.id<br>              ele.value<br>              ele.className<br>            注意：class属性不能采用这种方式，<br>            <strong>读取class属性时需要使用 元素.classNam</strong>e   </p><p>修改元素的属性：<br>    语法：元素.属性名 &#x3D; 属性值  </p><p> innerHTML<br>     使用该属性可以获取或设置元素内部的HTML代码  </p><h2 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h2><p> 事件指的是用户和浏览器之间的交互行为。比如：点击按钮、关闭窗口、鼠标移动。。。<br> 我们可以为事件来绑定回调函数来响应事件。<br> 绑定事件的方式：<br>    1.可以在标签的事件属性中设置相应的JS代码<br>        例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;js代码。。。&quot;</span>&gt;按钮&lt;/button&gt;  </span><br></pre></td></tr></table></figure><p>2.可以通过为对象的指定事件属性设置回调函数的形式来处理事件<br>    例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;按钮&lt;/button&gt;  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  </span><br></pre></td></tr></table></figure><p>文档的加载<br> 浏览器在加载一个页面时，是按照自上向下的顺序加载的，加载一行执行一行。<br> 如果将js代码编写到页面的上边，当代码执行时，页面中的DOM对象还没有加载，<br>    此时将会无法正常获取到DOM对象，导致DOM操作失败。<br> 解决方式一：<br>     可以将js代码编写到body的下边  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>  </span><br><span class="line">  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  </span><br><span class="line">&lt;/body&gt;  </span><br></pre></td></tr></table></figure><p> 解决方式二：<br>     将js代码编写到window.onload &#x3D; function(){}中<br>     window.onload 对应的回调函数会在整个页面加载完毕以后才执行，<br>        所以可以确保代码执行时，DOM对象已经加载完毕了  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);  </span><br><span class="line">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">        &#125;;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&lt;/script&gt;    </span><br></pre></td></tr></table></figure><h2 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h2><p>通过具体的元素节点来查询<br>元素.getElementsByTagName()<br>通过标签名查询当前元素的指定后代元素  </p><p><strong>子节点包括便签元素中的文本，子元素自包含标签元素</strong>  </p><p>元素.childNodes<br> 获取当前元素的<strong>所有子节点</strong><br> <strong>会获取到空白的文本子节点</strong>  </p><p>childNodes属性会获取包括文本节点在呢的所有节点<br>  根据DOM标签标签间空白也会当成文本节点<br>  注意：在IE8及以下的浏览器中，不会将空白文本当成子节点，<br>    所以该属性在IE8中会返回4个子元素而其他浏览器是9个  </p><p>元素.children<br> 获取当前元素的<strong>所有子元素</strong>  </p><p>元素.firstChild<br> 获取当前元素的<strong>第一个子节点</strong>，会获取到空白的文本子节点  </p><p>元素.lastChild<br> 获取当前元素的<strong>最后一个子节点</strong>  </p><p>元素.parentNode<br> 获取当前元素的父元素  </p><p>元素.previousSibling<br> 获取当前元素的前一个兄弟节点  </p><p>previousElementSibling获取前一个兄弟元素，IE8及以下不支持  </p><p>元素.nextSibling<br> 获取当前元素的后一个兄弟节点  </p><p>firstElementChild获取当前元素的第一个子元素<br> firstElementChild不支持IE8及以下的浏览器，<br>    如果需要兼容他们尽量不要使用  </p><p>innerHTML和innerText<br>这两个属性并没有在DOM标准定义，但是大部分浏览器都支持这两个属性<br>两个属性作用类似，都可以获取到标签内部的内容，<br><strong>不同是innerHTML会获取到html标签，而innerText会自动去除标签</strong><br>如果使用这两个属性来设置标签内部的内容时，没有任何区别的  </p><p><strong>读取标签内部的文本内容</strong>  </p></h1>h1中的文本内容</h1>  <p>元素.firstChild.nodeValue  </p><h2 id="document对象的其他的属性和方法"><a href="#document对象的其他的属性和方法" class="headerlink" title="document对象的其他的属性和方法"></a>document对象的其他的属性和方法</h2><p>document.all<br> <strong>获取页面中的所有元素</strong>，相当于document.getElementsByTagName(“*”);  </p><p>document.documentElement<br> <strong>获取页面中html根元素</strong>  </p><p>document.body<br> 获取页面中的body元素  </p><p>document.getElementsByClassName()<br> <strong>根据元素的class属性值查询一组元素节点对象</strong><br> 这个方法不支持IE8及以下的浏览器  </p><p>document.querySelector()<br> <strong>根据CSS选择器去页面中查询一个元素</strong><br> 如果匹配到的元素有多个，则它会返回查询到的第一个元素  </p><p>document.querySelectorAll()<br> 根据CSS选择器去页面中查询一组元素<br> 会将匹配到所有元素封装到一个数组中返回，即使只匹配到一个  </p><h2 id="DOM修改"><a href="#DOM修改" class="headerlink" title="DOM修改"></a>DOM修改</h2><p>document.createElement(“TagName”)<br>    可以用于创建一个元素节点对象，<br>    它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，<br>    并将创建好的对象作为返回值返回<br>document.createTextNode(“textContent”)<br>可以根据文本内容创建一个文本节点对象  </p><p><strong>父节点.appendChild(子节点)</strong><br>  向父节点中添加指定的子节点<br><strong>父节点.insertBefore(新节点,旧节点)</strong><br> 将一个新的节点插入到旧节点的前边<br>父节点.replaceChild(新节点,旧节点)<br> 使用一个新的节点去替换旧节点  </p><p><strong>父节点.removeChild(子节点)</strong><br> 删除指定的子节点<br>  推荐方式：<strong>子节点.parentNode.removeChild(子节点)</strong>  </p><p><strong>以上方法，实际就是改变了相应元素（标签）的innerHTML的值。</strong>  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myClick</span>(<span class="string">&quot;btn07&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="comment">//向city中添加广州  </span></span><br><span class="line">    <span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*  </span></span><br><span class="line"><span class="comment">* 使用innerHTML也可以完成DOM的增删改的相关操作  </span></span><br><span class="line"><span class="comment">* 一般我们会两种方式结合使用  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">    <span class="comment">//city.innerHTML += &quot;&lt;li&gt;广州&lt;/li&gt;&quot;;  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//创建一个li  </span></span><br><span class="line">    <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);  </span><br><span class="line">    <span class="comment">//向li中设置文本  </span></span><br><span class="line">    li.<span class="property">innerHTML</span> = <span class="string">&quot;广州&quot;</span>;  </span><br><span class="line">    <span class="comment">//将li添加到city中  </span></span><br><span class="line">    city.<span class="title function_">appendChild</span>(li);  </span><br><span class="line">  </span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure><h2 id="DOM对CSS的操作"><a href="#DOM对CSS的操作" class="headerlink" title="DOM对CSS的操作"></a>DOM对CSS的操作</h2><h3 id="读取和修改内联样式"><a href="#读取和修改内联样式" class="headerlink" title="读取和修改内联样式"></a>读取和修改内联样式</h3><p>使用style属性来操作元素的内联样式<br>    读取内联样式：<br>    语法：元素.style.样式名<br>例子：<br>    元素.style.width<br>    元素.style.height<br>    注意：<strong>如果样式名中带有-，则需要将样式名修改为驼峰命名法将-去掉，然后后的字母改大写</strong><br>    比如：backgroundcolor &gt; backgroundColor<br>    borderwidth &gt; borderWidth<br>修改内联样式：<br>语法：元素.style.样式名 &#x3D; 样式值<br> <strong>通过style修改和读取的样式都是内联样式</strong>，由于内联样式的优先级比较高，<br>    所以我们通过JS来修改的样式，往往会立即生效，<br>    <strong>但是如果样式中设置了!important，则内联样式将不会生效。</strong>  </p><h3 id="读取元素的当前样式"><a href="#读取元素的当前样式" class="headerlink" title="读取元素的当前样式"></a>读取元素的当前样式</h3><p>正常浏览器<br> <strong>使用getComputedStyle()</strong><br> 这个方法是window对象的方法，可以返回一个对象，这个对象中保存着当前元素生效样式<br> 参数：<br>    1.要获取样式的元素<br>    2.可以传递一个伪元素，一般传null<br> 例子：<br>    获取元素的宽度<br>        getComputedStyle(box , null)[“width”];<br> 通过该方法读取到样式都是只读的不能修改  </p><p>IE8<br> <strong>使用currentStyle</strong><br> 语法：<br>    元素.currentStyle.样式名<br> 例子：<br>    box.currentStyle[“width”]<br> 通过这个属性读取到的样式是只读的不能修改  </p><p><strong>实现兼容性</strong>  </p><p>&#x2F;&#x2F;对象.属性不存在，不会报错，如果直接寻找对象，（当前作用域到全局作用域）找不到会报错  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">* 定义一个函数，用来获取指定元素的当前的样式  </span></span><br><span class="line"><span class="comment">* 参数：  </span></span><br><span class="line"><span class="comment">* obj 要获取样式的元素  </span></span><br><span class="line"><span class="comment">* name 要获取的样式名  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyle</span>(<span class="params">obj , name</span>)&#123;  </span><br><span class="line"><span class="comment">//对象.属性不存在，不会报错，如果直接寻找对象，（当前作用域到全局作用域）找不到会报错  </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">getComputedStyle</span>)&#123;  </span><br><span class="line">        <span class="comment">//正常浏览器的方式，具有getComputedStyle()方法  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getComputedStyle</span>(obj , <span class="literal">null</span>)[name];  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="comment">//IE8的方式，没有getComputedStyle()方法  </span></span><br><span class="line">        <span class="keyword">return</span> obj.<span class="property">currentStyle</span>[name];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//return window.getComputedStyle?getComputedStyle(obj , null)[name]:obj.currentStyle[name];  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="其他的样式相关的属性"><a href="#其他的样式相关的属性" class="headerlink" title="其他的样式相关的属性"></a>其他的样式相关的属性</h3><p>注意：以下样式都是只读的,未指明偏移量都是相对于当前窗口左上角  </p><p>clientHeight<br> 元素的可见高度，包括元素的内容区和内边距的高度<br>clientWidth<br> 元素的可见宽度，包括元素的内容区和内边距的宽度<br>offsetHeight<br> 整个元素的高度，包括内容区、内边距、边框<br>offfsetWidth<br> 整个元素的宽度，包括内容区、内边距、边框<br>offsetParent<br> 当前元素的定位父元素<br> 离他最近的开启了定位的祖先元素，如果所有的元素都没有开启定位，则返回body<br>offsetLeft<br>offsetTop<br> 当前元素和定位父元素之间的偏移量<br> offsetLeft水平偏移量  offsetTop垂直偏移量  </p><p>scrollHeight<br>scrollWidth<br> 获取元素滚动区域的高度和宽度  </p><p>scrollTop<br>scrollLeft<br> 获取元素垂直和水平滚动条滚动的距离  </p><p>判断滚动条是否滚动到底<br> 垂直滚动条<br>    scrollHeight -scrollTop &#x3D; clientHeight  </p><p> 水平滚动<br>    scrollWidth -scrollLeft &#x3D; clientWidth  </p><h1 id="事件（Event）-1"><a href="#事件（Event）-1" class="headerlink" title="事件（Event）"></a>事件（Event）</h1><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>当响应函数被调用时，浏览器每次都会将一个事件对象作为实参传递进响应函数中，这个事件对象中封装了当前事件的相关信息，比如：鼠标的坐标，键盘的按键，鼠标的按键，滚轮的方向。。  </p><p>可以在响应函数中定义一个形参，来使用事件对象，但是在IE8以下浏览器中事件对象没有做完实参传递，而是作为window对象的属性保存  </p><p>例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.事件 = <span class="keyword">function</span>(<span class="params">event</span>)&#123;  </span><br><span class="line">    event = event || <span class="variable language_">window</span>.<span class="property">event</span>;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">元素.事件 = <span class="keyword">function</span>(<span class="params">e</span>)&#123;  </span><br><span class="line">e = e || event;  </span><br><span class="line">  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><p><strong>获取到鼠标的坐标</strong><br>  clientX和clientY<br>    用于获取鼠标在当前的可见窗口的坐标<br>  div的偏移量，是相对于整个页面的  </p><p>  pageX和pageY 可以获取鼠标相对于当前页面的坐标<br>    但是这个两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用<br>var left &#x3D; event.clientX;<br>var　top &#x3D; event.clientY;  </p><h2 id="事件的冒泡（Bubble）"><a href="#事件的冒泡（Bubble）" class="headerlink" title="事件的冒泡（Bubble）"></a>事件的冒泡（Bubble）</h2><p> 事件的冒泡指的是事件向上传导，当后代元素上的事件被触发时，将会导致其祖先元素上的同类事件也会触发。<br> 事件的冒泡大部分情况下都是有益的，如果需要取消冒泡，则需要使用事件对象来取消<br> <strong>可以将事件对象的cancelBubble设置为true，即可取消冒泡</strong><br>   例子：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.事件 = <span class="keyword">function</span>(<span class="params">event</span>)&#123;  </span><br><span class="line">    event = event || <span class="variable language_">window</span>.<span class="property">event</span>;  </span><br><span class="line">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h2 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h2><p> 指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。  </p><p>事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能  </p><p>我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的<br>我们可以尝试将其绑定给元素的共同的祖先元素  </p><p> <strong>target</strong> : event中的target表示的触发事件的对象  </p><h2 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><p>addEventListener()<br> 通过这个方法也可以为元素绑定响应函数<br>参数：<br>    1.事件的字符串，不要on<br>    2.回调函数，当事件触发时该函数会被调用<br>    3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false  </p><p>使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，<br>这样当事件被触发时，响应函数将会按照函数的绑定顺序执行  </p><p>这个方法不支持IE8及以下的浏览器  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">btn01.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line"><span class="title function_">alert</span>(<span class="number">1</span>);  </span><br><span class="line">&#125;,<span class="literal">false</span>);  </span><br><span class="line">  </span><br><span class="line">btn01.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line"><span class="title function_">alert</span>(<span class="number">2</span>);  </span><br><span class="line">&#125;,<span class="literal">false</span>);  </span><br></pre></td></tr></table></figure><p>attachEvent()  </p><p> 在IE8中可以使用attachEvent()来绑定事件<br>参数：<br>    1.事件的字符串，要on<br>    2.回调函数  </p><p>这个方法也可以同时为一个事件绑定多个处理函数，<br>    不同的是它是后绑定先执行，执行顺序和addEventListener()相反  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">btn01.<span class="title function_">attachEvent</span>(<span class="string">&quot;onclick&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line"><span class="title function_">alert</span>(<span class="number">1</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">btn01.<span class="title function_">attachEvent</span>(<span class="string">&quot;onclick&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line"><span class="title function_">alert</span>(<span class="number">2</span>);  </span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个函数，用来为指定元素绑定响应函数  </span></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"> * addEventListener()中的this，是绑定事件的对象  </span></span><br><span class="line"><span class="comment"> * attachEvent()中的this，是window  </span></span><br><span class="line"><span class="comment"> *  需要统一两个方法this  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"> * 参数：  </span></span><br><span class="line"><span class="comment"> * obj 要绑定事件的对象  </span></span><br><span class="line"><span class="comment"> * eventStr 事件的字符串(不要on)  </span></span><br><span class="line"><span class="comment"> *  callback 回调函数  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj , eventStr , callback</span>)&#123;  </span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;  </span><br><span class="line">        <span class="comment">//大部分浏览器兼容的方式  </span></span><br><span class="line">        obj.<span class="title function_">addEventListener</span>(eventStr , callback , <span class="literal">false</span>);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="comment">/*  </span></span><br><span class="line"><span class="comment"> * this是谁由调用方式决定  </span></span><br><span class="line"><span class="comment"> * callback.call(obj)  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">        <span class="comment">//IE8及以下  </span></span><br><span class="line">        obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span>+eventStr , <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">            <span class="comment">//在匿名函数中调用回调函数  </span></span><br><span class="line">            callback.<span class="title function_">call</span>(obj);  </span><br><span class="line">        &#125;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h2><p> 关于事件的传播网景公司和微软公司有不同的理解<br> 微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件，<br>    然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。<br> 网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，<br>    然后在向内传播给后代元素<br> W3C综合了两个公司的方案，将事件传播分成了三个阶段<br>    1.捕获阶段<br>         在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件<br>    2.目标阶段<br>         事件捕获到目标元素，捕获结束开始在目标元素上触发事件<br>    3.冒泡阶段<br>         事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件  </p><p> 如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true<br>    一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false  </p><p> IE8及以下的浏览器中没有捕获阶段  </p><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>拖拽事件  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;  </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css">  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-id">#box1</span>&#123;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">width</span>: <span class="number">100px</span>;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">height</span>: <span class="number">100px</span>;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">background-color</span>: red;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">position</span>: absolute;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#box2</span>&#123;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">width</span>: <span class="number">100px</span>;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">height</span>: <span class="number">100px</span>;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">background-color</span>: yellow;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">position</span>: absolute;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">left</span>: <span class="number">200px</span>;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">top</span>: <span class="number">200px</span>;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 拖拽box1元素  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> *  - 拖拽的流程  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 1.当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 2.当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 3.当鼠标松开时，被拖拽元素固定在当前位置onmouseup  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> */</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//获取box1  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box2&quot;</span>);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> img1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img1&quot;</span>);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//开启box1的拖拽  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">drag</span>(box1);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//开启box2的  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">drag</span>(box2);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">drag</span>(img1);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">/*  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 提取一个专门用来设置拖拽的函数  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 参数：开启拖拽的元素  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> */</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">drag</span>(<span class="params">obj</span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    obj.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//设置box1捕获所有鼠标按下的事件  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/*  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * setCapture()  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * - 只有IE支持，但是在火狐中调用时不会报错，  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 而如果使用chrome调用，会报错  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> */</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/*if(box1.setCapture)&#123;  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">box1.setCapture();  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">&#125;*/</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="property">setCapture</span> &amp;&amp; obj.<span class="title function_">setCapture</span>();  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        event = event || <span class="variable language_">window</span>.<span class="property">event</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//div的偏移量 鼠标.clentX - 元素.offsetLeft  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//div的偏移量 鼠标.clentY - 元素.offsetTop  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ol = event.<span class="property">clientX</span> - obj.<span class="property">offsetLeft</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ot = event.<span class="property">clientY</span> - obj.<span class="property">offsetTop</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//为document绑定一个onmousemove事件  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            event = event || <span class="variable language_">window</span>.<span class="property">event</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//获取鼠标的坐标  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> left = event.<span class="property">clientX</span> - ol;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> top = event.<span class="property">clientY</span> - ot;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//修改box1的位置  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            obj.<span class="property">style</span>.<span class="property">left</span> = left+<span class="string">&quot;px&quot;</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            obj.<span class="property">style</span>.<span class="property">top</span> = top+<span class="string">&quot;px&quot;</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//为document绑定一个鼠标松开事件  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//当鼠标松开时，被拖拽元素固定在当前位置onmouseup  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//取消document的onmousemove事件  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//取消document的onmouseup事件  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="literal">null</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//当鼠标松开时，取消对事件的捕获  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            obj.<span class="property">releaseCapture</span> &amp;&amp; obj.<span class="title function_">releaseCapture</span>();  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="comment">/*  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">* 当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">* 此时会导致拖拽功能的异常，这个是浏览器提供的默认行为，  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">* 如果不希望发生这个行为，则可以通过return false来取消默认行为  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">*   </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">* 但是这招对IE8不起作用  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">*/</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="literal">false</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">    我是一段文字  </span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/an.jpg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute;&quot;</span>/&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span></span><br></pre></td></tr></table></figure><p>滚轮事件：  </p><p>onwheel都支持  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;  </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css">  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-id">#box1</span>&#123;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">width</span>: <span class="number">100px</span>;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">height</span>: <span class="number">100px</span>;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">background-color</span>: red;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//获取id为box1的div  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//为box1绑定一个鼠标滚轮滚动的事件  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * onmousewheel鼠标滚轮滚动的事件，会在滚轮滚动时触发，  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 但是火狐不支持该属性  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> *   </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 在火狐中需要使用 DOMMouseScroll 来绑定滚动事件  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 注意该事件需要通过addEventListener()函数来绑定  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> */</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box1.<span class="property">onmousewheel</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        event = event || <span class="variable language_">window</span>.<span class="property">event</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//event.wheelDelta 可以获取鼠标滚轮滚动的方向  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//向上滚 120   向下滚 -120  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//wheelDelta这个值我们不看大小，只看正负  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//alert(event.wheelDelta);  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//wheelDelta这个属性火狐中不支持  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//在火狐中使用event.detail来获取滚动的方向  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//向上滚 -3  向下滚 3  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//alert(event.detail);  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/*  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 当鼠标滚轮向下滚动时，box1变长  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 当滚轮向上滚动时，box1变短  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> */</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//判断鼠标滚轮滚动的方向  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span>(event.<span class="property">wheelDelta</span> &gt; <span class="number">0</span> || event.<span class="property">detail</span> &lt; <span class="number">0</span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//向上滚，box1变短  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            box1.<span class="property">style</span>.<span class="property">height</span> = box1.<span class="property">clientHeight</span> - <span class="number">10</span> + <span class="string">&quot;px&quot;</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;<span class="keyword">else</span>&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//向下滚，box1变长  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            box1.<span class="property">style</span>.<span class="property">height</span> = box1.<span class="property">clientHeight</span> + <span class="number">10</span> + <span class="string">&quot;px&quot;</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/*  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 需要使用event来取消默认行为event.preventDefault();  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 但是IE8不支持event.preventDefault();这个玩意，如果直接调用会报错  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> */</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        event.<span class="property">preventDefault</span> &amp;&amp; event.<span class="title function_">preventDefault</span>();  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/*  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 当滚轮滚动时，如果浏览器有滚动条，滚动条会随之滚动，  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * 这是浏览器的默认行为，如果不希望发生，则可以取消默认行为  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> */</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="literal">false</span>;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//为火狐绑定滚轮事件  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">bind</span>(box1,<span class="string">&quot;DOMMouseScroll&quot;</span>,box1.<span class="property">onmousewheel</span>);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj , eventStr , callback</span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//大部分浏览器兼容的方式  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="title function_">addEventListener</span>(eventStr , callback , <span class="literal">false</span>);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;<span class="keyword">else</span>&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/*  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * this是谁由调用方式决定  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> * callback.call(obj)  </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> */</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//IE8及以下  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span>+eventStr , <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//在匿名函数中调用回调函数  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            callback.<span class="title function_">call</span>(obj);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;height: 2000px;&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">  </span></span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>键盘事件：<br>onkeydown<br> 按键被按下<br> 对于onkeydown来说如果一直按着某个按键不松手，则事件会一直触发<br> 当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一点，其他的会非常的快，这种设计是为了防止误操作的发生。<br>onkeyup<br> 按键被松开  </p><p>键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document  </p><p>keyCode  </p><p>可以通过keyCode来获取按键的编码<br>通过它可以判断哪个按键被按下<br>除了keyCode，事件对象中还提供了几个属性<br>altKey<br>ctrlKey<br>shiftKey<br>这个三个用来判断alt ctrl 和 shift是否被按下<br>如果按下则返回true，否则返回false  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//console.log(event.keyCode);  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//判断一个y是否被按下  </span></span><br><span class="line"><span class="comment">//判断y和ctrl是否同时被按下  </span></span><br><span class="line"><span class="keyword">if</span>(event.<span class="property">keyCode</span> === <span class="number">89</span> &amp;&amp; event.<span class="property">ctrlKey</span>)&#123;  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ctrl和y都被按下了&quot;</span>);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">input.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;  </span><br><span class="line">    event = event || <span class="variable language_">window</span>.<span class="property">event</span>;  </span><br><span class="line">    <span class="comment">//数字 48 - 57  </span></span><br><span class="line">    <span class="comment">//使文本框中不能输入数字  </span></span><br><span class="line">    <span class="keyword">if</span>(event.<span class="property">keyCode</span> &gt;= <span class="number">48</span> &amp;&amp; event.<span class="property">keyCode</span> &lt;= <span class="number">57</span>) &#123;  </span><br><span class="line">        <span class="comment">//在文本框中输入内容，属于onkeydown的默认行为  </span></span><br><span class="line">        <span class="comment">//如果在onkeydown中取消了默认行为，则输入的内容，不会出现在文本框中  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>浏览器对象模型(browser object model)<br>BOM可以使我们通过JS来操作浏览器<br>在BOM中为我们提供了一组对象，用来完成对浏览器的操作<br>BOM对象<br>Window<br> 代表的是整个浏览器的窗口，同时window也是网页中的全局对象<br>Navigator<br> 代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器<br>Location<br> 代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面<br>History<br> 代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录<br>    由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页<br>    而且该操作只在当次访问时有效<br>Screen<br> 代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息  </p><p>这些BOM对象在浏览器中都是作为window对象的属性保存的，<br>可以通过window对象来使用，也可以直接使用  </p><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p> 代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器<br> 由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了<br> 一般我们只会使用userAgent来判断浏览器的信息，<br>    userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，<br>    不同的浏览器会有不同的userAgent  </p><p>火狐的userAgent<br>Mozilla5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko20100101 Firefox50.0  </p><p>Chrome的userAgent<br>Mozilla5.0 (Windows NT 6.1; Win64; x64) AppleWebKit537.36 (KHTML, like Gecko) Chrome52.0.2743.82 Safari537.36  </p><p>IE8<br>Mozilla4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)  </p><p>IE9<br>Mozilla5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)  </p><p>IE10<br>Mozilla5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)  </p><p>IE11<br>Mozilla5.0 (Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko<br> 在IE11中已经将微软和IE相关的标识都已经去除了，所以我们基本已经不能通过UserAgent来识别一个浏览器是否是IE了  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(navigator.<span class="property">appName</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> ua = navigator.<span class="property">userAgent</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ua);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(firefoxi.<span class="title function_">test</span>(ua))&#123;  </span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;你是火狐！！！&quot;</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(chromei.<span class="title function_">test</span>(ua))&#123;  </span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;你是Chrome&quot;</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(msiei.<span class="title function_">test</span>(ua))&#123;  </span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;你是IE浏览器~~~&quot;</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;ActiveXObject&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>)&#123;  </span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;你是IE11，枪毙了你~~~&quot;</span>);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p> 对象可以用来操作浏览器向前或向后翻页<br>length<br> 属性，可以获取到当成访问的链接数量<br>back()<br> 可以用来回退到上一个页面，作用和浏览器的回退按钮一样<br>forward()<br> 可以跳转下一个页面，作用和浏览器的前进按钮一样<br>go()<br> 可以用来跳转到指定的页面<br> 它需要一个整数作为参数<br>    1:表示向前跳转一个页面 相当于forward()<br>    2:表示向前跳转两个页面<br>    -1:表示向后跳转一个页面<br>    -2:表示向后跳转两个页面  </p><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><p> 该对象中封装了浏览器的地址栏的信息<br>如果直接打印location，则可以获取到地址栏的信息（当前页面的完整路径）<br>alert(location);<br>如果直接将location属性修改为一个完整的路径，或相对路径<br>则我们页面会自动跳转到该路径，并且会生成相应的历史记录<br>location &#x3D; “http:<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a>;<br>location &#x3D; “01.BOM.html”;<br>assign()<br> 用来跳转到其他的页面，作用和直接修改location一样<br>reload()<br> 用于重新加载当前页面，作用和刷新按钮一样<br> 如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面<br>location.reload(true);<br>replace()<br> 可以使用一个新的页面替换当前页面，调用完毕也会跳转页面<br>    不会生成历史记录，不能使用回退按钮回退  </p><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p><strong>setInterval()</strong><br> 定时调用<br> 可以将一个函数，每隔一段时间执行一次<br> 参数：<br>    1.回调函数，该函数会每隔一段时间被调用一次<br>    2.每次调用间隔的时间，单位是毫秒  </p><p> 返回值：<br>    返回一个Number类型的数据<br>    这个数字用来作为定时器的唯一标识<br><strong>clearInterval()可以用来关闭一个定时器</strong><br>方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器   </p><p>clearInterval()可以接收任意参数，<br>    如果参数是一个有效的定时器的标识，则停止对应的定时器<br>    如果参数不是一个有效的标识，则什么也不做  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;  </span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">count.<span class="property">innerHTML</span> = num++;  </span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">11</span>) &#123;  </span><br><span class="line"><span class="comment">//关闭定时器  </span></span><br><span class="line"><span class="built_in">clearInterval</span>(timer);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;, <span class="number">1000</span>);  </span><br></pre></td></tr></table></figure><h3 id="延时调用"><a href="#延时调用" class="headerlink" title="延时调用"></a>延时调用</h3><p><strong>setTimeout</strong>  </p><p>延时调用一个函数不马上执行，而是隔一段时间以后在执行，而且只会执行一次<br>延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次<br>延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己需要去选择  </p><p>var timer &#x3D; setTimeout(function(){<br>console.log(num++);<br>},3000);  </p><p>使用clearTimeout()来关闭一个延时调用<br>clearTimeout(timer);  </p><p>#类的操作  </p><p><strong>直接修改元素的类css：</strong>  </p><p>通过style属性来修改元素的样式，每修改一个样式，浏览器就需要重新渲染一次页面。 这样的执行的性能是比较差的，而且这种形式当我们要修改多个样式时，也不太方便 我希望一行代码，可以同时修改多个样式  </p><p>我们可以通过修改元素的class属性来间接的修改样式.这样一来，我们只需要修改一次，即可同时修改多个样式，浏览器只需要重新渲染页面一次，性能比较好，<br>并且这种方式，可以使表现和行为进一步的分离  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box.<span class="property">className</span> += <span class="string">&quot; b2&quot;</span>;<span class="comment">//注意有空格，添加class属性  </span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个函数，用来向一个元素中添加指定的class属性值  </span></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"> * 参数:  </span></span><br><span class="line"><span class="comment"> * obj 要添加class属性的元素  </span></span><br><span class="line"><span class="comment"> *  cn 要添加的class值  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addClass</span>(<span class="params">obj, cn</span>) &#123;  </span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_">hasClass</span>(obj, cn)) &#123;  </span><br><span class="line">obj.<span class="property">className</span> += <span class="string">&quot; &quot;</span> + cn;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"> * 判断一个元素中是否含有指定的class属性值  </span></span><br><span class="line"><span class="comment"> * 如果有该class，则返回true，没有则返回false  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasClass</span>(<span class="params">obj, cn</span>) &#123;  </span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\b&quot;</span> + cn + <span class="string">&quot;\\b&quot;</span>);  </span><br><span class="line"><span class="keyword">return</span> reg.<span class="title function_">test</span>(obj.<span class="property">className</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"> * 删除一个元素中的指定的class属性  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeClass</span>(<span class="params">obj, cn</span>) &#123;  </span><br><span class="line"><span class="comment">//创建一个正则表达式  </span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\b&quot;</span> + cn + <span class="string">&quot;\\b&quot;</span>);  </span><br><span class="line"><span class="comment">//删除class  </span></span><br><span class="line">obj.<span class="property">className</span> = obj.<span class="property">className</span>.<span class="title function_">replace</span>(reg, <span class="string">&quot;&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"> * toggleClass可以用来切换一个类  </span></span><br><span class="line"><span class="comment"> * 如果元素中具有该类，则删除  </span></span><br><span class="line"><span class="comment"> * 如果元素中没有该类，则添加  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toggleClass</span>(<span class="params">obj , cn</span>)&#123;  </span><br><span class="line"><span class="comment">//判断obj中是否含有cn  </span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">hasClass</span>(obj , cn))&#123;  </span><br><span class="line"><span class="comment">//有，则删除  </span></span><br><span class="line"><span class="title function_">removeClass</span>(obj , cn);  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line"><span class="comment">//没有，则添加  </span></span><br><span class="line"><span class="title function_">addClass</span>(obj , cn);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p> <strong>JavaScript Object Notation</strong> JS对象表示法</p><h2 id="JSON-格式"><a href="#JSON-格式" class="headerlink" title="JSON 格式"></a>JSON 格式</h2><ol><li>复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。</li><li>原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和<code>null</code>（不能使用<code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code>和<code>undefined</code>）。</li><li>字符串<strong>必须使用双引号表示</strong>，不能使用单引号。</li><li>对象的键名必须放在双引号里面。</li><li>数组或对象最后一个成员的后面，不能加逗号。</li></ol><p>JS中的对象只有JS自己认识，其他的语言都不认识<br><strong>JSON就是一个特殊格式的字符串</strong>，这个字符串可以被任意的语言所识别，<br>并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互<br> JSON和JS对象的格式一样，只不过<strong>JSON字符串中的属性名必须加双引号</strong><br>    其他的和JS语法一致<br>JSON分类：<br>    1.对象 {}<br>    2.数组 []  </p><p>JSON中允许的值：<br>    1.字符串<br>    2.数值<br>    3.布尔值<br>    4.null<br>    5.对象<br>    6.数组  </p><p>举例：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="string">&#x27;[1,2,3,&quot;hello&quot;,true]&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="string">&#x27;&#123;&quot;arr&quot;:[1,2,3]&#125;&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> arr2 =<span class="string">&#x27;[&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;,&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;]&#x27;</span>;  </span><br></pre></td></tr></table></figure><p>JSON工具类  </p><p>json &gt; js对象<br>JSON.parse()<br> 可以将以JSON字符串转换为js对象<br> 它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回  </p><p>var o &#x3D; JSON.parse(json);<br>var o2 &#x3D; JSON.parse(arr);  </p><p>var obj3 &#x3D; {name:”猪八戒” , age:28 , gender:”男”};  </p><p>JS对象 &gt; JSON<br>JSON.stringify()                -ify&#x2F;fy，表示”使……化。<br> 可以将一个JS对象转换为JSON字符串<br> 需要一个js对象作为参数，会返回一个JSON字符串  </p><p>var str &#x3D; JSON.stringify(obj3);<br>console.log(str);  </p><p>JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错  </p><p>​  </p><h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>只读的<code>localStorage</code> 属性允许你访问一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a> 源（origin）的对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage"><code>Storage</code></a>；其存储的数据能在跨浏览器会话保留。<code>localStorage</code> 类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage"><code>sessionStorage</code></a>，但其区别在于：存储在 <code>localStorage</code> 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 <code>sessionStorage</code> 的数据会被清除 。  </p><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>eval()<br> 这个函数可以用来执行一段字符串形式的JS代码，并将执行结果返回<br> 如果使用eval()执行的字符串中含有{},它会将{}当成是代码块<br>    如果不希望将其当成代码块解析，则需要在字符串前后各加一个()  </p><p> eval()这个函数的功能很强大，可以直接执行一个字符串中的js代码，<br>    但是在开发中尽量不要使用，首先它的执行性能比较差，然后它还具有安全隐患  </p><pre><code>var str = &#39;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#39;;  var obj = eval(&quot;(&quot;+str+&quot;)&quot;);  </code></pre><p>编码  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*  </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 在字符串中使用转义字符输入Unicode编码  </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * \u四位编码  </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span>  </span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\u2620&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--在网页中使用Unicode编码  </span></span><br><span class="line"><span class="comment">&amp;#编码; 这里的编码需要的是10进制  </span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 200px;&quot;</span>&gt;</span><span class="symbol">&amp;#9760;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 200px;&quot;</span>&gt;</span><span class="symbol">&amp;#9856;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>confirm()用于弹出一个带有确认和取消按钮的提示框<br>需要一个字符串作为参数，该字符串将会作为提示文字显示出来<br>如果用户点击确认则会返回true，如果点击取消则返回false<br>var flag &#x3D; confirm(“确认删除”+name+”吗?”);  </p><h2 id="原生js实现复制内容到剪切板"><a href="#原生js实现复制内容到剪切板" class="headerlink" title="原生js实现复制内容到剪切板"></a>原生js实现复制内容到剪切板</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">copy</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>);  </span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(input);  </span><br><span class="line">    input.<span class="title function_">setAttribute</span>(<span class="string">&quot;value&quot;</span>,<span class="variable language_">this</span>.<span class="property">solution</span>.<span class="property">code</span>);  </span><br><span class="line">    input.<span class="title function_">select</span>();  </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;copy&quot;</span>)) &#123;  </span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;copy&quot;</span>);  </span><br><span class="line">        <span class="comment">// console.log(&quot;复制成功&quot;);  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(input);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;p&gt;JavaScript负责页面中的的行为。  &lt;/p&gt;
&lt;p&gt;它是一门运行在浏</summary>
      
    
    
    
    <category term="Frontend" scheme="http://example.com/categories/Frontend/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML&amp;CSS</title>
    <link href="http://example.com/2022/10/04/HTML&amp;CSS/"/>
    <id>http://example.com/2022/10/04/HTML&amp;CSS/</id>
    <published>2022-10-03T16:19:14.765Z</published>
    <updated>2022-10-04T15:19:47.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML+CSS"></a>HTML+CSS</h1><h3 id="01-HTML"><a href="#01-HTML" class="headerlink" title="01. HTML"></a>01. HTML</h3><h4 id="01-基础知识"><a href="#01-基础知识" class="headerlink" title="01_基础知识"></a>01_基础知识</h4><p>文档声明：声明当前网页的版本</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html5的文档声明：<span class="comment">&lt;!--doctype html--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Doctype HTML--&gt;</span></span><br></pre></td></tr></table></figure><p>meta标签：设置网页的元数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网上购物&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;专业的综合网站购物商城&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--将页面在几秒后重定向到另一个网站--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;3;url=https://www.mozilla.org&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">charset：设置网页的字符集，避免乱码问题</span></span><br><span class="line"><span class="comment">name：指定的数据的名称</span></span><br><span class="line"><span class="comment">content：指定的数据的内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>head：网页的头部，主要用来帮助浏览器或搜索引擎来解析网页（爬虫）</p><p>在网页中编写的多个空格默认会自动检测成一个空格</p><p>有的时候不能直接书写字母两侧的大于和小于号</p><p>需要在网页中书写特殊符号，则需要使用html中的实体（转义字符）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">实体的语法：&amp;实体的名字;</span><br><span class="line"><span class="symbol">&amp;nbsp;</span>空格</span><br><span class="line"><span class="symbol">&amp;gt;</span>大于</span><br><span class="line"><span class="symbol">&amp;lt;</span>小于</span><br><span class="line"><span class="symbol">&amp;copy;</span>版权符号</span><br></pre></td></tr></table></figure><p>标题标签（一共有六级标题）：h1~h6，重要性递减，一般情况下一个页面中只有一个h1</p><p>hgroup标签用来为标题分组，可以将一组相关的标题同时放入到hgroup</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>回乡偶书二首<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>其一<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>blockquote表示一个长引用（没有引号），q表示一个短引用（显示引号）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;blockquote&gt;</span><br><span class="line">这句话我从来没说过！</span><br><span class="line">&lt;/blockquote&gt;</span><br><span class="line"></span><br><span class="line">子曰：&lt;q&gt;学而时习之，不亦乐乎&lt;/q&gt;</span><br></pre></td></tr></table></figure><p>块元素（block element）：在网页中一般通过块元素对页面进行布局</p><p>行内元素（inline element）：主要用来包裹文字</p><p>[注] p元素中不能放任何的块元素</p><p>header：表示网页的头部</p><p>main：表示网页的主体部分（一个页面中只会有一个）</p><p>footer：表示网页的底部</p><p>nav：表示网页中的导航</p><p>aside：表示和主题相关的其他内容（侧边栏）</p><p>article：表示一个独立的文章</p><p>section：表示一个独立的区块，上边的标签都不能表示时使用section</p><p>div：没有语义，就用来表示一个区块</p><p>span：行内元素，没有语义，一般用于在网页中选中文字</p><p>html中列表一共有三种：</p><ol><li>有序列表：ul</li><li>无序列表：ol</li><li>定义列表：使用dl标签创建一个定义列表，使用dt表示定义的内容，使用dd对内容进行解释说明</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>结构表示网页的结构<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[注] 列表之间可以互相嵌套</p><p>使用a标签定义超链接</p><p>属性：href：指定跳转的目标路径</p><p>​可以将href属性设置为#，这样点击超链接以后，页面不会发生跳转，而是回到页面顶部的位置</p><p>​可以使用 javascript:; 来作为href的属性，这样点击超链接以后什么也不会发生</p><p>​target：用来指定超链接打开的位置</p><p>​可选值：_self：默认值，在当前页面中打开超链接</p><p>​_blank：在一个新的页面中打开超链接</p><p>超链接是一个行内元素，在a标签中可以嵌套除他自身外的任何元素</p><p>.&#x2F; 表示当前文件所在的目录</p><p>..&#x2F; 表示当前文件所在目录的上一级目录</p><p>img标签是一个自结束标签</p><p>img这种元素属于替换元素（块和行内元素之间，具有两种元素的特点）</p><p>属性：src：指定外部图片的路径</p><p>​alt：对图片的描述，这个描述默认不会显示，有些浏览器会在图片无法加载时显示，搜索引擎会根据alt中的内容来识别图片，如果不写alt属性则图片不会被搜索引擎所找到</p><p>​width</p><p>​height</p><p>​[注] 宽度和高度中如果只修改了一个，则另一个会等比例缩放；一般情况在pc端，不建议修改图片的大小，需要多大的图片就裁多大，但是在移动端，经常需要对图片进行缩放</p><p>内联框架：用于向当前页面中引入一个其他页面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.qq.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">frameholder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>audio标签用来向页面中引入一个外部的音频文件</p><p>属性：controls：是否允许用户控制播放（音视频文件引入时，默认不允许用户自己控制播放停止）</p><p>​autoplay：音频文件是否自动播放</p><audio controls>    <source src="./source.audio.mp3">    <source src="./source/audio.ogg">    <!--兼容ie-->    <embed src="./source.audio.mp3" type="audio/mp3" width="300" height="50"></audio><p>video标签来向页面中引入一个视频</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/flower.webm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/flower.mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;./source/flower.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="02-表格"><a href="#02-表格" class="headerlink" title="02_表格"></a>02_表格</h4><p>我们通过table标签来创建一个表格</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在table中使用tr表示表格中的一行，有几个tr就有几行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在tr中使用td表示一个单元格，有几个·td就有几个单元格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>A1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>B1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>C1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>D1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>A2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>B2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>C2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rowspan纵向的合并单元格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>D2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>A3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>B3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>C3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>A4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>B4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- colspan横向的合并单元格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>C4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>长表格</p><p>可以将一个表格分成三个部分：thead（头部），tbody（主体），tfoot（底部）</p><p>th表示头部的单元格</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>收入<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>支出<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表格的样式</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/* 外部的边框 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* border-spacing：指定边框之间的距离 */</span></span><br><span class="line">    <span class="comment">/* border-spacing: 0px; */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* border-collapse：设置边框的合并 */</span></span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="comment">/* 内部的边框 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="comment">/* 默认情况下元素在td中是垂直居中的，可以通过vertical-align来修改 */</span></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果表格中没有使用tbody而是直接使用tr，那么浏览器会自动创建一个tbody，并且将tr全部放到tbody中</span></span><br><span class="line"><span class="comment">tr是table后代元素，但不是table的子元素，是tbody的子元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">tbody</span> &gt; <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">    <span class="comment">/* 隔行变色 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="03-表单"><a href="#03-表单" class="headerlink" title="03_表单"></a>03_表单</h4><p>表单用于将本地的数据提交给远程的服务器</p><p>form的属性：action表单要提交的服务器的地址</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;target.html&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本框 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：数据要提交到服务器中，必须要为元素指定一个name属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 密码框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 单选按钮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">必须指定一个value属性，value属性最终会作为用户的填写的值 </span></span><br><span class="line"><span class="comment">checked可以将单选按钮设置为默认选中</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 多选按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 下拉列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;haha&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;i&quot;</span>&gt;</span>选项一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;ii&quot;</span>&gt;</span>选项二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;iii&quot;</span>&gt;</span>选项三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="02-CSS"><a href="#02-CSS" class="headerlink" title="02. CSS"></a>02. CSS</h3><h4 id="01-css简介"><a href="#01-css简介" class="headerlink" title="01_css简介"></a>01_css简介</h4><p>层叠样式表</p><p>网页实际上是一个多层的结构，通过css可以分别为网页的每一个层来设置样式，而最终我们能看到的只是网页的最上边一层</p><p>使用css修改元素的样式</p><p>​第一种方式（内联样式，行内样式）：在标签内通过style属性来设置元素的样式</p><p>​第二种方式（内部样式表）：将样式编写到head中的style标签里</p><p>​问题：内部样式只能对一个网页起作用，里边的样式不能跨页面进行复用</p><p>​第三种方式（外部样式表）：将css样式编写到一个外部的css文件中</p><p>​需要通过link标签进行引入，意味着样式可以在不同页面之间进行复用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​将css样式编写到一个外部的css文件中，可以使用到浏览器的缓存机制，从而加快网页的加载速度，提要用户体验</p><h4 id="02-css语法"><a href="#02-css语法" class="headerlink" title="02_css语法"></a>02_css语法</h4><p>css的基本语法：选择器  声明块</p><p>选择器：选中页面中的指定元素</p><p>声明块：指定要为元素设置的样式；声明是一个名值对结构</p><h5 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h5><ol><li>元素选择器</li></ol><p>​作用：根据标签名来选中指定的元素</p><p>​语法：标签名{}</p><p>​例子：p{}     h1{}     div{}</p><ol start="2"><li>id 选择器</li></ol><p>​作用：根据元素的id属性值选中一个元素</p><p>​语法：#id属性值{}</p><p>​例子：#box{}    #red{}</p><ol start="3"><li>类选择器</li></ol><p>​作用：根据元素的class属性值选中一组元素</p><p>​语法：.class属性值{}</p><ol start="4"><li>通配选择器</li></ol><p>​作用：选中页面中的所有元素</p><p>​语法：*{}</p><h5 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h5><ol><li>交集选择器</li></ol><p>​作用：选中同时符合多个条件的元素</p><p>​语法：选择器1选择器2选择器3选择器n{}</p><p>​注意：交集选择器中如果有元素选择器，必须使用元素选择器开头</p><p>​例子：div.red{}</p><ol start="2"><li>选择器分组（并集选择器）</li></ol><p>​作用：同时选择多个选择器对应的元素</p><p>​语法：选择器1, 选择器2, 选择器3, 选择器n{}</p><p>​例子：h1, span{}</p><h5 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h5><ol><li>子元素选择器</li></ol><p>​作用：选中指定父元素的指定子元素</p><p>​语法：父元素&gt;子元素</p><p>​例子：div&gt;span</p><ol start="2"><li>后代元素选择器</li></ol><p>​作用：选中指定元素内的指定后代元素</p><p>​语法：祖先  后代</p><p>​例子：div span</p><ol start="3"><li>兄弟元素选择器</li></ol><p>​作用：选择下一个兄弟</p><p>​语法：前一个+后一个</p><p>​例子：p+span</p><p>​作用：选择下面所有兄弟</p><p>​语法：兄~弟</p><p>​例子：p~span</p><h5 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h5><p>​作用：[属性名] 选择含有指定属性的元素</p><p>​[属性名&#x3D;属性值] 选择含有指定属性和属性值的元素</p><p>​[属性名^&#x3D;属性值] 选择属性值以指定值开头的元素</p><p>​[属性名$&#x3D;属性值] 选择属性值以指定值结尾的元素</p><p>​[属性名*&#x3D;属性值] 选择属性值中含有某值的元素</p><p>​例子：p[title]p[title&#x3D;abc]p[title^&#x3D;abc]p[title$&#x3D;abc]p[title*&#x3D;e]</p><h5 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h5><ol><li>伪类</li></ol><p>伪类（不存在的类，特殊的类）：用来描述一个元素的特殊状态，比如：第一格子元素、被点击的元素、鼠标移入的元素……</p><p>伪类一般情况下都是使用 : 开头</p><p>:first-child第一个子元素</p><p>:last-child最后一个子元素</p><p>:nth-child()选中第n个子元素</p><p>​特殊值：n第n个（n的范围是0到正无穷）</p><p>​2n或even选中偶数位的元素</p><p>​2n+1或odd选中奇数位的元素</p><p>[注] 以上这些伪类都是根据所有的子元素进行排序</p><p>:first-of-type</p><p>:last-of-type</p><p>:nth-of-type()</p><p>[注] 这几个伪类的功能和上述的类似，不同点是他们在同类型元素中进行排序</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--例子--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果：没有任何一个元素变红 */</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-of-type &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果：第一个li元素变红 */</span></span><br></pre></td></tr></table></figure><p>:not()否定伪类：将符合条件的元素从选择器中去除</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)) &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果：除了第三个元素的所有li都变红 */</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>)) &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果：除了第三个li的所有其他li都变红 */</span></span><br></pre></td></tr></table></figure><p>超链接的伪类</p><p>:link表示没有访问过的链接（正常的链接）</p><p>:visited表示访问过的链接</p><p>:hover表示鼠标移入的状态</p><p>:active标识鼠标点击的状态</p><ol start="2"><li>伪元素</li></ol><p>伪元素：表示页面中一些特殊的并不真实存在的元素（特殊的位置）</p><p>::first-letter表示第一个字母</p><p>::first-line表示第一行</p><p>::selection表示选中的内容</p><p>::before表示元素的开始</p><p>::after表示元素的结束</p><p>[注] before和after必须结合content来使用</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;『&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;』&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="03-样式的继承"><a href="#03-样式的继承" class="headerlink" title="03_样式的继承"></a>03_样式的继承</h4><p>样式的继承：我们为一个元素设置的样式同时也会应用到它的后代元素上</p><p>继承是发生在祖先后代之间的</p><p>继承的设计是为了方便我们的开发，利用继承可以将一些通用的样式统一设置到公共的祖先元素上，这样只设置一次即可让所有的元素具有该样式</p><p>注意：并不是所有的样式都会被继承，比如背景相关的、布局相关的这些样式不会被继承</p><h4 id="04-样式冲突"><a href="#04-样式冲突" class="headerlink" title="04_样式冲突"></a>04_样式冲突</h4><p>发生样式冲突时，应用哪个样式由选择器的权重（优先级）决定</p><p>选择器的权重：内联样式1000</p><p>​id选择器100</p><p>​类和伪类选择器10</p><p>​元素选择器1</p><p>​通配选择器0</p><p>​继承的样式没有优先级</p><p>比较优先级时，需要将所有的选择器的优先级进行想家计算，最后优先级越高，则越优先显示</p><p>可以在某一个样式的后边添加 !important ，则此时该样式会获取到最高的优先级</p><h4 id="05-单位"><a href="#05-单位" class="headerlink" title="05_单位"></a>05_单位</h4><ol><li>长度单位</li></ol><p>​像素</p><p>​不同屏幕的像素大小是不同的，像素越小的屏幕现实的效果越清晰，所以同样的200px在不同的设备下显示效果不一样</p><p>​百分比</p><p>​将属性值设置为相对于其父元素属性的百分比</p><p>​设置百分比可以使子元素跟随父元素的改变而改变</p><p>​em</p><p>​em是相对于元素的字体大小来计算的</p><p>​1 em &#x3D; 1 font-size</p><p>​em会根据字体大小的改变而改变</p><p>​rem</p><p>​rem是相对于根元素(html)的字体大小来计算的</p><ol start="2"><li><p>颜色单位</p><p>RGB</p><p>​语法：RGB(红色, 绿色, 蓝色)</p><p>RGBA</p><p>​就是在rgb的基础上增加了一个a表示不透明度</p><p>​需要第四个值，前三个和rgb一样，第四个表示不透明度，1表示完全不透明，0表示完全透明，.5半透明</p></li></ol><h3 id="03-布局（Layout）"><a href="#03-布局（Layout）" class="headerlink" title="03. 布局（Layout）"></a>03. 布局（Layout）</h3><h4 id="01-文档流（normal-flow）"><a href="#01-文档流（normal-flow）" class="headerlink" title="01_文档流（normal flow）"></a>01_文档流（normal flow）</h4><p>​网页实际上是一个多层的结构，通过css可以分别为网页的每一个层来设置样式，而最终我们能看到的只是网页的最上边一层</p><p>​这些层中，最底下的一层成为文档流，文档流是网页的基础，我们所创建的元素默认都是在文档流中进行排列</p><p>​对于我们来说元素主要有两个状态：在文档流中，不在文档流中（脱离文档流）</p><p>​元素在文档流中有什么特点？</p><p>​块元素：会在页面中独占一行</p><p>​默认宽度是父元素的全部（会把父元素撑满）</p><p>​默认高度是被内容撑开（子元素）</p><p>​行内元素：不会在页面中独占一行，只占自身的大小</p><p>​行内元素在页面中从左向右水平排列，如果一行中不能容纳下所有的行内元素，则元素会环岛第二行继续从左向右排列</p><p>​默认宽度和默认高度都是被内容撑开</p><h4 id="02-盒模型（box-model）"><a href="#02-盒模型（box-model）" class="headerlink" title="02_盒模型（box model）"></a>02_盒模型（box model）</h4><p>css将页面中的所有元素都设置为了一个矩形的盒子</p><p>每个盒子都由以下几个部分组成：</p><p>​1. 内容区（content）：元素中的所有子元素和文本内容都在内容区中排列</p><p>​width：内容区的宽度</p><p>​height：内容区的高度</p><p>​2. 边框（border）：边框属于盒子边缘，边框里边属于盒子内部，出了边框都是盒子的外部，边框的大小会影响到整个盒子的大小</p><p>​border-width：边框的宽度</p><p>​可以用来指定四个方向的边框的宽度</p><p>​值的情况：四个值：上 右 下 左</p><p>​            三个值：上 左右 下</p><p>​            两个值：上下 左右</p><p>​            一个值：上下左右</p><p>​border-color：边框的颜色</p><p>​同样可以用来指定四个方向的边框的颜色</p><p>​border-color也可以省略不写，自动使用color的颜色值</p><p>​border-style：边框的样式</p><p>​solid实线</p><p>​dotted点状虚线</p><p>​dashed虚线</p><p>​double双线</p><ol start="3"><li><p>内边距（padding）：内容区和边框之间的距离</p><p>​内边距的设置会影响到盒子的大小，背景颜色会延伸到内边距上</p><p>​一个盒子的可见框的大小，有内容区、内边距和边框共同决定</p></li><li><p>外边距（margin）：内容区和边框之间的距离</p><p>​外边距不会影响盒子可见框的大小，但会影响盒子的位置</p><p>​默认情况下我们设置的左和上边距会移动元素自身，而设置下和右边距会移动其他元素</p><p>​margin会影响到盒子实际占用空间</p></li></ol><h4 id="03-元素的水平布局"><a href="#03-元素的水平布局" class="headerlink" title="03_元素的水平布局"></a>03_元素的水平布局</h4><p>​元素在其父元素中水平方向的位置由以下几个属性共同决定：margin-left, border-left, padding-left, width, margin-right, border-right, padding-right</p><p>​一个元素在其父元素中，水平布局必须满足以下的等式：以上7个属性相加&#x3D;其父元素内容区的宽度</p><p>​如果相加结果使等式不成立，则成为过度约束，则等式会自动调整。如果这7个值没有为auto的情况，则浏览器会自动调整margin-right；如果width（默认是auto）, margin-left, margin-right设置为auto，则会自动调整为auto的那个值使等式成立</p><p>​如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大，设置为auto的外边距会自动为0</p><p>​如果将三个值都设置为auto，则外边距都是0，宽度最大</p><p>​如果将两个外边距设置为auto，宽度固定值，则会将外边距设置为相同的值，所以经常利用这个特点来使一个元素在父元素中水平居中</p><h4 id="04-元素的垂直布局"><a href="#04-元素的垂直布局" class="headerlink" title="04_元素的垂直布局"></a>04_元素的垂直布局</h4><p>​子元素是在父元素的内容区中排列的，如果子元素的大小超过了父元素，则子元素从父元素中溢出，使用overflow属性来设置父元素如何处理溢出的子元素</p><p>​可选值：visible：默认值，子元素从父元素中溢出，在父元素外部的位置显示</p><p>​hidden：溢出内容将会被裁剪不被显示</p><p>​scroll：生成两个滚动条，通过滚动条来查看完整的内容</p><p>​auto：根据需要生成滚动条</p><p>​垂直外边距的重叠（折叠）：相邻的垂直方向外边距会发生重叠现象</p><p>兄弟元素</p><p>​兄弟元素之间的相邻垂直外边距会去两者之间的较大值（两者都是正值）</p><p>​特殊情况：如果相邻的外边距一正一负，则取两者的和</p><p>​如果相邻的外边距都是负值，则取两者中绝对值较大的</p><p>​兄弟元素之间的外边距重叠，对于开发是有利的，所以我们不需要进行处理</p><p>父子元素</p><p>​父子元素之间相邻外边距，子元素的会传递给父元素</p><p>​父子外边距的折叠会影响到页面的布局，必须要进行处理</p><h4 id="05-行内元素的盒模型"><a href="#05-行内元素的盒模型" class="headerlink" title="05_行内元素的盒模型"></a>05_行内元素的盒模型</h4><p>​行内元素不支持设置宽度和高度</p><p>​行内元素可以设置padding，但是垂直方向padding不会影响页面的布局</p><p>​行内元素可以设置border，但是垂直方向border不会影响页面的布局</p><p>​行内元素可以设置margin，但是垂直方向margin不会影响页面的布局</p><ul><li>display用来设置元素显示的类型</li></ul><p>​可选值：inline将元素设置为行内元素</p><p>​block将元素设置为块元素</p><p>​inline-block将元素设置为行内块元素（既可以设置宽度和高度，又不会独占一行）</p><p>​table将元素设置为一个表格</p><p>​none元素不在页面中显示</p><ul><li>visibility用来设置元素的显示状态</li></ul><p>​可选值：visible默认值，元素在页面中显示</p><p>​hidden元素在页面中隐藏不显示，但是依然占据页面的位置</p><ul><li>box-sizing用来设置盒子尺寸的计算方式（设置width和height的作用）</li></ul><p>​可选值：content-box默认值，宽度和高度用来设置内容区的大小</p><p>​border-box宽度和高度用来设置整个盒子可见框的大小</p><ul><li><p>outline用来设置元素的轮廓线，用法和border一模一样，轮廓和边框不同的点，就是轮廓不会影响到可见框的大小</p></li><li><p>box-shadow用来设置元素的阴影效果，阴影不会影响到可见框的大小</p></li></ul><p>​第一个值：水平偏移量，设置阴影的水平位置，正值向右移动</p><p>​第二个值：垂直偏移量，设置阴影的垂直位置，正值向下移动</p><p>​第三个值：阴影的模糊半径，值越大，越模糊</p><p>​第四个值：阴影的颜色</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li><p>border-radius用来设置圆角，圆角设置的圆的半径大小</p><p>​四个值：左上 右上 右下 左下</p><p>​三个值：左上 右上&#x2F;左下 右下</p><p>​两个值：左上&#x2F;右下 右上&#x2F;左下</p></li></ul><h4 id="06-浮动"><a href="#06-浮动" class="headerlink" title="06_浮动"></a>06_浮动</h4><p>通过浮动可以使一个元素向其父元素的左侧或右侧移动</p><p>使用float属性来设置元素的浮动</p><p>​可选值：none默认值，不浮动</p><p>​left向左浮动</p><p>​right向右浮动</p><p>​[注] 元素设置浮动以后，水平布局的等式便不需要强制成立</p><p>​元素设置浮动以后，会完全从文档流中脱离，不再占用文档流的位置，所以元素下边的还在文档流中的元素会自动向上移动</p><h5 id="浮动的特点"><a href="#浮动的特点" class="headerlink" title="浮动的特点"></a>浮动的特点</h5><pre><code> 1. 浮动元素会完全脱离文档流，不再占用文档流的位置 2. 设置浮动以后元素会向父元素的左侧或右侧移动 3. 浮动元素默认不会从父元素中移出 4. 浮动元素移动时，不会超过它前边的其他浮动元素 5. 如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移 6. 浮动元素不会超过它上边的浮动的兄弟元素，最多最多就是和他一样高 7. 浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以利用浮动来设置文字环绕图片的效果</code></pre><p>简单总结：浮动目前来讲主要作用是让页面中的元素可以水平排列，通过浮动可以制作一些水平方向的布局</p><p>从文档流脱离后，元素的一些特点也会改变</p><h5 id="脱离文档流的特点"><a href="#脱离文档流的特点" class="headerlink" title="脱离文档流的特点"></a>脱离文档流的特点</h5><p>块元素：</p><ol><li>块元素不再独占一行</li><li>块元素的宽度和高度默认都被内容撑开</li></ol><p>行内元素：</p><p>​行内元素元素脱离文档流后会变成块元素，特点和块元素一样</p><p>脱离文档流以后，不需要再区分块和行内了</p><h5 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h5><p>在浮动布局中，父元素的高度默认是被子元素撑开的，当子元素浮动后，会完全脱离文档流，将无法撑起父元素的高度，导致父元素的高度丢失，父元素丢失以后，其下的元素会自动上移，导致页面的布局混乱</p><p>BFC（Block Formatting Content）块级格式化环境：BFC是CSS中的一个隐含的属性，可以为一个元素开启BFC，开启BFC该元素会变成一个独立的布局空间</p><p>开启BFC的特点：</p><ol><li>开启BFC的元素不会被浮动元素所覆盖</li><li>开启BFC的元素子元素和父元素外边距不会重叠</li><li>开启BFC的元素可以包含浮动的子元素</li></ol><p>可以通过一些特殊的方式来开启BFC：</p><ol><li>设置元素的浮动（不推荐，会丢失宽度）</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将元素设置为行内块元素（不推荐，会丢失宽度）</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>将元素的overflow设置为一个非visible的值</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们不希望某个元素因为其他元素的浮动影响而改变位置，可以通过clear属性来清除浮动元素对当前元素所产生的影响</p><p>​可选值：left清除左侧浮动元素对当前元素的影响</p><p>​right清除右侧浮动元素对当前元素的影响</p><p>​both清除两侧中最大影响的那侧</p><p>​原理：设置清除浮动以后，浏览器会自动为元素添加一个上外边距，使其位置不受其他元素的影响</p><ol start="4"><li>使用after伪类解决高度塌陷</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>clearfix这个样式可以同时解决高度塌陷和外边距重叠的问题（最终版本）</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="07-定位（position）"><a href="#07-定位（position）" class="headerlink" title="07_定位（position）"></a>07_定位（position）</h4><p>定位是一种更加高级的布局手段</p><p>通过定位可以将元素摆放到页面的任意位置</p><p>position属性来设置定位</p><p>​可选值：static默认值，元素是静止的，没有开启定位</p><p>​relative相对定位</p><p>​absolute绝对定位</p><p>​fixed固定定位</p><p>​sticky粘滞定位</p><h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><p>特点：</p><ol><li><p>元素开启相对定位以后，如果不设置偏移量，元素不会发生任何变化</p></li><li><p>相对定位是参照于元素在文档流中的位置进行定位的</p></li><li><p>相对定位会提升元素的层级</p></li><li><p>相对定位不会使元素脱离文档流</p></li><li><p>相对定位不会改变元素的性质，块还是块，行内还是行内</p></li></ol><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><p>特点：</p><ol><li><p>元素开启绝对定位以后，如果不设置偏移量，元素不会发生任何变化</p></li><li><p>绝对定位会使元素脱离文档流</p></li><li><p>绝对定位不会改变元素的性质，行内变成块，块的宽高被内容撑开</p></li><li><p>绝对定位会提升元素的层级</p></li><li><p>绝对定位元素是相对于其包含块进行定位的</p><p>​正常情况下，包含块就是离当前元素最近的祖先块元素；绝对定位的包含块就是离它最近的开启了定位的祖先元素，如果所有的祖先元素都没有开启定位，则相对于根元素进行定位</p></li></ol><h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><p>固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样</p><p>唯一不同的是，固定定位永远参照于浏览器的视口进行定位</p><h5 id="粘滞定位"><a href="#粘滞定位" class="headerlink" title="粘滞定位"></a>粘滞定位</h5><p>粘滞定位和相对定位的特点基本一致</p><p>不同的是粘滞定位可以在元素到达某个位置时将其固定</p><p>兼容性不好，可能需要结合JS</p><h5 id="元素的层级"><a href="#元素的层级" class="headerlink" title="元素的层级"></a>元素的层级</h5><p>对于开启了定位的元素，可以通过z-index属性来指定元素的层级</p><p>z-index需要一个整数作为参数，值越大元素的层级越高，越优先显示</p><p>如果元素的层级一样，则优先显示靠下的元素</p><p>祖先元素的层级再高也不会盖住后代元素</p><h3 id="04-字体"><a href="#04-字体" class="headerlink" title="04.字体"></a>04.字体</h3><h4 id="01-字体"><a href="#01-字体" class="headerlink" title="01_字体"></a>01_字体</h4><p>行高：指的是文字占有的实际高度，可以通过line-height来设置行高</p><p>行高可以制定一个大小（px  em），也可以直接为行高设置一个整数，表示行高是字体的指定的倍数</p><p>可以将行高设置为和高度一样的值，使单行文字在一个元素中垂直居中</p><p>行高还经常用来设置文字的行间距（行间距 &#x3D; 行高 - 字体大小）</p><p>字体框：字体存在的格子，设置font-size实际上就是在设置字体框的高度</p><p>font可以设置字体相关的所有属性</p><p>​语法：font: 字体大小&#x2F;行高  字体族</p><ol><li><p>font-size</p></li><li><p>font-weight字重，字体的加粗</p></li></ol><p>​可选值：normal默认值，不加粗</p><p>​bold加粗</p><ol start="3"><li>font-style字体的风格</li></ol><p>​可选值：normal正常的</p><p>​italic斜体</p><h4 id="02-文本的样式"><a href="#02-文本的样式" class="headerlink" title="02_文本的样式"></a>02_文本的样式</h4><p>text-align设置文本的水平对齐</p><p>​可选值：left左侧对齐</p><p>​right右侧对齐</p><p>​center居中对齐</p><p>​justify两端对齐</p><p>vertical-align设置元素的垂直对齐</p><p>​可选值：baseline默认值，基线对齐</p><p>​top顶部对齐</p><p>​bottom底部对齐</p><p>​middle居中对齐</p><p>text-decoration设置文本修饰</p><p>​可选值：none什么都没有</p><p>​underline下划线</p><p>​line-through删除线</p><p>​overline上划线</p><p>white-space设置网页如何处理空白</p><p>​可选值：normal正常</p><p>​nowrap不换行</p><p>​pre保留空白</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 案例：显示不下的文字用...表示 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: allipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="05-背景"><a href="#05-背景" class="headerlink" title="05.背景"></a>05.背景</h3><h4 id="01-属性"><a href="#01-属性" class="headerlink" title="01_属性"></a>01_属性</h4><ul><li><p>background-color设置背景颜色</p></li><li><p>background-image设置背景图片</p></li></ul><p>​如果背景图片小于元素，则背景图片会自动在元素中平铺将元素铺满</p><p>​如果背景图片大于元素，将会一个部分背景无法完全显示</p><p>​如果背景图片和元素一样大，则会直接正常显示</p><ul><li>background-repeat用来设置背景的重复方式</li></ul><p>​可选值：repeat默认值，沿着x轴，y轴双方向重复</p><p>​repeat-x沿着x轴方向重复</p><p>​repeat-y沿着y轴方向重复</p><p>​no-repeat不重复</p><ul><li>background-position用来设置背景的位置</li></ul><p>​可选值：topleftrightbottomcenter</p><p>​使用方位词时必须要同时指定两个值，如果只写一个，则另一个默认为center</p><p>​通过偏移量来指定背景图片的位置：水平垂直</p><ul><li>background-clip用来设置背景的范围</li></ul><p>​可选值：border-box默认值，背景会出现在边框的下方</p><p>​padding-box背景不会出现在边框，只出现在内容区和内边距</p><p>​content-box背景只出现在内容区</p><ul><li>background-origin背景图片的偏移量计算的原点</li></ul><p>​可选值：padding-box默认值，从内边距处开始计算</p><p>​content-box从内容区处开始计算</p><p>​border-box从边框处开始计算</p><ul><li><p>background-size设置背景图片的大小</p><p>第一个值是宽度，第二个值是高度，如果只写一个，则第二个默认是auto</p><p>cover图片的比例不变，将元素铺满</p><p>contain图片比例不变，将图片在元素中完整显示</p></li><li><p>background-attachment背景元素是否跟随元素移动</p></li></ul><p>​可选值：scroll默认值，背景图片会跟随元素移动</p><p>​fixed背景会固定在页面中，不会跟随元素移动</p><h4 id="02-雪碧图"><a href="#02-雪碧图" class="headerlink" title="02_雪碧图"></a>02_雪碧图</h4><p>图片资源：<a href="https://imgtu.com/i/TOcql6">https://imgtu.com/i/TOcql6</a></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 案例：雪碧图（CSS-Sprite） */</span></span><br><span class="line"><span class="comment">/* 可以将多个小图片统一保存到一个大图片中，通过调整background-position来显示响应的图片，这样图片会同时加载到网页中，就可以有效的避免出现闪烁的问题 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">93px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">29px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;./img/09/btn.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">93px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: -<span class="number">186px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>雪碧图的使用步骤：</p><ol><li>先确定要使用的图标</li><li>测量图标的大小</li><li>根据测量结果创建一个元素</li></ol><p>雪碧图的特点：一次性将多个图片加载进页面，降低请求的次数，加快访问速度</p><h4 id="03-渐变"><a href="#03-渐变" class="headerlink" title="03_渐变"></a>03_渐变</h4><p>通过渐变可以设置一些复杂的背景颜色，可以实现从一个颜色向其他颜色过渡的效果</p><p>渐变是图片，需要通过background-image来设置</p><h5 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h5><p>线性渐变：颜色沿着一条直线发生变化</p><ul><li>linear-gradient()</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例子：红色在开头，黄色在结尾，渐变方向为向右 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, red, yellow);</span><br></pre></td></tr></table></figure><p>渐变方向：to leftto rightto bottomto top</p><p>​xxxdegdeg表示度数</p><p>​xxxturnturn表示圈</p><p>渐变可以同时指定多个颜色，默认情况下平均分布，也可以手动指定渐变的分布</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red, <span class="number">50px</span>, yellow, <span class="number">100px</span>, green, <span class="number">120px</span>);</span><br></pre></td></tr></table></figure><ul><li>repeating-linear-gradient()可以平铺的线性渐变</li></ul><h5 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h5><p>径向渐变：放射性的效果</p><p>radial-gradient()</p><p>默认情况下径向渐变的形状根据元素的形状来计算的</p><p>​正方形–&gt;圆形长方形–&gt;椭圆形</p><p>我们也可以手动指定径向渐变的大小：</p><p>​circle圆形</p><p>​ellipse椭圆</p><p>​closest-side近边</p><p>​closest-corner近角</p><p>​farthest-side远边</p><p>​farthest-corner远角</p><p>也可以指定渐变的位置</p><p>语法：radial-gradient(大小 at 位置, 颜色, 位置, 颜色,位置)</p><h3 id="06-CSS动画"><a href="#06-CSS动画" class="headerlink" title="06.CSS动画"></a>06.CSS动画</h3><h4 id="01-过渡（transition）"><a href="#01-过渡（transition）" class="headerlink" title="01_过渡（transition）"></a>01_过渡（transition）</h4><p>通过过渡可以指定一个属性作为发生变化时的切换方式</p><ul><li>transition-property：指定要执行过渡的属性</li></ul><p>​多个属性间使用逗号隔开</p><p>​如果所有属性都需要过渡，则使用all关键字</p><p>​大部分属性都支持过渡效果，注意过渡时必须是从一个有效数值向另一个有效数值进行过渡</p><ul><li><p>transition-duration：制定过渡效果的持续时间</p><p>时间单位：s 和 ms （1s &#x3D; 1000ms）</p></li><li><p>transition-timing-function：过渡的时序函数，指定过渡的执行方式</p></li></ul><p>​可选值：ease默认值，慢速开始，先加速再减速</p><p>​linear匀速运动</p><p>​ease-in加速运动</p><p>​ease-out减速运动</p><p>​ease-in-out先加速再减速</p><p>​cubic-bezier()时序函数（<a href="http://cubic-bezier.com)/">http://cubic-bezier.com）</a></p><p>​step()分步执行过渡效果</p><p>​第一个值：分几步</p><p>​第二个值：end默认值，在时间结束时执行过渡</p><p>​start在时间开始时执行过渡</p><ul><li>transition-delay：过渡效果的延迟，等待一段时间后再执行过渡</li></ul><h4 id="02-动画（animation）"><a href="#02-动画（animation）" class="headerlink" title="02_动画（animation）"></a>02_动画（animation）</h4><p>动画和过渡类似，都是可以实现一些动态的效果</p><p>不同的是过渡需要在某个属性发生变化是才会触发，动画可以自动触发动态效果</p><p>设置动画效果，必须先要设置一个关键帧，关键帧设置了动画执行的每一个步骤</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">    <span class="comment">/* from表示动画的开始位置 */</span></span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* to表示动画的结束位置 */</span></span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">700px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>animation-iteration-count：动画执行的次数</li></ul><p>​可选值：次数</p><p>​infinite：无限执行</p><ul><li>animation-direction：动画执行的方向</li></ul><p>​可选值：normal默认值，从from向to运行</p><p>​reverse从to向from运行</p><p>​alternate从from向to运行，重复执行动画时反向执行</p><p>​alternate-reverse从to向from运行，重复执行动画时反向执行</p><ul><li>animation-play-state：动画的执行状态</li></ul><p>​可选值：running默认值，动画执行</p><p>​paused动画暂停</p><ul><li>animation-fill-mode：动画的填充模式</li></ul><p>​可选值：none默认值，动画执行完毕元素回到原来的位置</p><p>​forwards动画执行完毕元素会停止在动画结束的位置</p><p>​backwards动画延时等待时，元素就会处于开始的位置</p><p>​both结合了forwards和backwards</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 案例：奔跑的少年 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">256px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">256px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./img/12/bg2.png&#x27;</span>);</span><br><span class="line">    <span class="attribute">animation</span>: run <span class="number">1s</span> <span class="built_in">step</span>(<span class="number">6</span>) infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>-<span class="attribute">animation</span>: -<span class="number">1536px</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片资源：<a href="https://img-blog.csdnimg.cn/2021051919492059.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjg5MTI5,size_16,color_FFFFFF,t_70">https://img-blog.csdnimg.cn/2021051919492059.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjg5MTI5,size_16,color_FFFFFF,t_70</a></p><h4 id="03-变形"><a href="#03-变形" class="headerlink" title="03_变形"></a>03_变形</h4><p>变形就是通过CSS来改变元素的形状或位置</p><p>变形不会影响到页面的布局</p><p>transform属性用来设置元素的变形效果</p><h5 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h5><p>​translateX()沿着x轴方向平移</p><p>​translateY()沿着y轴方向平移</p><p>​translateZ()沿着z轴方向平移</p><p>​平移元素，百分比是相对于自身计算的</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="comment">/* transform: translate(100px); */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 案例一：使大小不确定的元素在页面中居中 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 案例二：卡片悬浮时的动画 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">4px</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>z轴平移属于立体效果（近大远小），默认情况下网页是不支持透视，如果需要看见效果，必须要设置网页的视距</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h5><p>通过旋转可以使元素沿着x,y,z轴旋转指定的角度</p><p>​rotateX()沿着x轴方向旋转</p><p>​rotateY()沿着y轴方向旋转</p><p>​rotateZ()沿着z轴方向旋转</p><p>backface-visibility是否显示元素的背面</p><h5 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h5><p>对元素进行缩放的函数：</p><p>​scaleX()水平方向</p><p>​scaleY()垂直方向</p><p>​scale()双方向</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 案例：鼠标移入图片放大 */</span></span><br><span class="line"><span class="selector-class">.img-wrapper</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-wrapper</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07-less"><a href="#07-less" class="headerlink" title="07.less"></a>07.less</h3><p>less是一门css的处理语言</p><p>less是一个css的增强版，通过less可以编写更少的代码实现更强大的样式</p><p>less中添加量许多的新特性，像对变量的支持，对mixin的支持</p><p>less语法大体上和css语法一致，但是less中增添了许多对css的扩展，所以浏览器无法直接执行less代码，要执行必须先将less转换为css，然后再由浏览器执行</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attr">--color</span>: #bfa;</span><br><span class="line">    <span class="attr">--length</span>: 200px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="comment">/* calc()计算函数 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">1000px</span>/<span class="number">2</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">var</span>(--length);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(--length);</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">var</span>(--length);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(--length);</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">var</span>(--length);</span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// less中的单行注释，注释中的内容不会被解析到css中</span></span><br><span class="line"><span class="comment">/* css中的注释，内容会被解析到css文件中 */</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">    <span class="selector-class">.box2</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line">        <span class="selector-class">.box4</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.box3</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量：在变量中可以存储一个任意的值，并且可以在需要时，任意的修改变量中的值</span></span><br><span class="line"><span class="comment">// 变量的语法：@变量名</span></span><br><span class="line"><span class="variable">@a:</span> <span class="number">100px</span>;</span><br><span class="line"><span class="variable">@b:</span> <span class="number">#bfa</span>;</span><br><span class="line"><span class="variable">@c:</span> box6;</span><br><span class="line"><span class="selector-class">.box5</span> &#123;</span><br><span class="line">    <span class="comment">// 使用变量时，如果是直接使用，则以@变量名的形式使用即可</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@a</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为类名，或者一部分值使用时必须以@&#123;变量名&#125;的形式使用</span></span><br><span class="line"><span class="selector-class">.@&#123;c&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@a</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&quot;@&#123;c&#125;/1.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@d:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">// 变量发生重名时，会优先使用比较近的变量</span></span><br><span class="line"><span class="variable">@d:</span> <span class="number">115px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@d</span>;</span><br><span class="line">    <span class="comment">// 可以在变量声明前就使用变量</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@e:</span> <span class="number">335px</span>;</span><br></pre></td></tr></table></figure><p>父元素</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &amp;表示外层的父元素</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    &gt;<span class="selector-class">.box3</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">        <span class="comment">// .box1 &gt; .box3:hover</span></span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .box1:hover</span></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// :extend()对当前选择器扩展指定选择器的样式</span></span><br><span class="line"><span class="selector-class">.p2</span>:<span class="selector-tag">extend</span>(.p1) &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p3</span> &#123;</span><br><span class="line">    <span class="comment">// 直接对指定的样式进行引用，这里就相当于将p1的样式在这里进行了复制</span></span><br><span class="line">    <span class="comment">// mixin 混合</span></span><br><span class="line">    <span class="selector-class">.p1</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类选择器时可以在选择器后边添加一个括号，这是我们实际上就创建了一个mixins</span></span><br><span class="line"><span class="selector-class">.p4</span>() &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p5</span> &#123;</span><br><span class="line">    <span class="selector-class">.p4</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>混合函数</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在混合函数中，可以直接设置变量</span></span><br><span class="line"><span class="selector-class">.test</span>(<span class="variable">@w</span>: <span class="number">100px</span>, <span class="variable">@h</span>: <span class="number">200px</span>, <span class="variable">@bg-color</span>: red) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">@bg-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">// 调用混合函数，按顺序传递参数</span></span><br><span class="line">    <span class="selector-class">.test</span>(<span class="number">200px</span>, <span class="number">300px</span>, <span class="number">#bfa</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入其他的.less文件</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;syntax2.less&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="08-弹性盒（flex）"><a href="#08-弹性盒（flex）" class="headerlink" title="08.弹性盒（flex）"></a>08.弹性盒（flex）</h3><p>是css中的有一种布局手段，他主要用来代替浮动来完成页面的布局</p><p>flex可以使元素具有弹性，让元素可以跟随页面的大小的改变而改变</p><p>弹性容器：要使用弹性盒，必须现将一个元素设置为弹性容器</p><p>​display: flex设置为块级弹性容器</p><p>​display: inline-flex设置为行内弹性容器</p><p>弹性元素：弹性容器的子元素</p><p>​弹性元素可以同时是弹性容器</p><ul><li>flex-direction：指定容器中弹性元素的排列方式</li></ul><p>​可选值：row默认值，弹性元素在容器中水平排列（左向右）</p><p>​row-reverse弹性元素在容器中水平排列（右向左）</p><p>​column弹性元素在容器中垂直排列（上向下）</p><p>​column-reverse弹性元素在容器中垂直排列（上向下）</p><p>​主轴：弹性元素的排列方向为主轴</p><p>​侧轴：与主轴垂直方向的为侧轴</p><ul><li>flex-grow：指定弹性元素的伸展系数</li></ul><p>​当父元素有多余的空间时，子元素如何伸展</p><p>​父元素的剩余空间，会按照比例进行分配</p><ul><li>flex-shrink：指定弹性元素的收缩系数</li></ul><p>​当父元素的空间不足以容纳所有的子元素时，如何对子元素收缩</p><p>弹性容器的样式</p><ul><li>flex-wrap：设置弹性元素是否在弹性容器中自动换行</li></ul><p>​可选值：nowrap默认值，元素不会自动换行</p><p>​wrap元素沿着辅轴方向自动换行</p><p>​wrap-reverse元素沿着辅轴反方向换行</p><ul><li><p>flex-flow：wrap和direction的简写属性</p></li><li><p>justify-content：如何分配主轴上的空白空间（主轴上的元素如何排列）</p></li></ul><p>​可选值：flex-start元素沿着主轴起边排列</p><p>​flex-end元素沿着主轴终边排列</p><p>​center元素居中排列</p><p>​space-around空白分布到元素两侧</p><p>​space-between空白均匀分布到元素中间</p><p>​space-evenly空白分布到元素单侧</p><ul><li>align-items：元素在辅轴上如何对齐</li></ul><p>​可选值：stretch默认值，将元素的长度设置为相同的值</p><p>​flex-start元素不会拉伸，沿着辅轴起边对齐</p><p>​flex-end沿着辅轴终边对齐</p><p>​center居中对齐</p><p>​baseline基线对齐</p><ul><li><p>align-content：辅轴空白空间的分布</p></li><li><p>align-self：用来覆盖当前弹性元素上的align-items</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML-CSS&quot;&gt;&lt;a href=&quot;#HTML-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML+CSS&quot;&gt;&lt;/a&gt;HTML+CSS&lt;/h1&gt;&lt;h3 id=&quot;01-HTML&quot;&gt;&lt;a href=&quot;#01-HTML&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Frontend" scheme="http://example.com/categories/Frontend/"/>
    
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/10/03/hello-world/"/>
    <id>http://example.com/2022/10/03/hello-world/</id>
    <published>2022-10-03T10:57:35.944Z</published>
    <updated>2022-10-03T15:49:35.532Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
